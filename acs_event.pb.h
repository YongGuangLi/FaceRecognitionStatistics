// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: acs_event.proto

#ifndef PROTOBUF_acs_5fevent_2eproto__INCLUDED
#define PROTOBUF_acs_5fevent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "comm.pb.h"
// @@protoc_insertion_point(includes)

namespace com {
namespace hikvision {
namespace cms {
namespace api {
namespace eps {
namespace beds {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_acs_5fevent_2eproto();
void protobuf_AssignDesc_acs_5fevent_2eproto();
void protobuf_ShutdownFile_acs_5fevent_2eproto();

class AccessEventLog;

// ===================================================================

class AccessEventLog : public ::google::protobuf::Message {
 public:
  AccessEventLog();
  virtual ~AccessEventLog();
  
  AccessEventLog(const AccessEventLog& from);
  
  inline AccessEventLog& operator=(const AccessEventLog& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AccessEventLog& default_instance();
  
  void Swap(AccessEventLog* other);
  
  // implements Message ----------------------------------------------
  
  AccessEventLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccessEventLog& from);
  void MergeFrom(const AccessEventLog& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 event_code = 1;
  inline bool has_event_code() const;
  inline void clear_event_code();
  static const int kEventCodeFieldNumber = 1;
  inline ::google::protobuf::int32 event_code() const;
  inline void set_event_code(::google::protobuf::int32 value);
  
  // optional int32 device_id = 2;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 2;
  inline ::google::protobuf::int32 device_id() const;
  inline void set_device_id(::google::protobuf::int32 value);
  
  // optional int32 device_type = 3;
  inline bool has_device_type() const;
  inline void clear_device_type();
  static const int kDeviceTypeFieldNumber = 3;
  inline ::google::protobuf::int32 device_type() const;
  inline void set_device_type(::google::protobuf::int32 value);
  
  // optional string device_name = 4;
  inline bool has_device_name() const;
  inline void clear_device_name();
  static const int kDeviceNameFieldNumber = 4;
  inline const ::std::string& device_name() const;
  inline void set_device_name(const ::std::string& value);
  inline void set_device_name(const char* value);
  inline void set_device_name(const char* value, size_t size);
  inline ::std::string* mutable_device_name();
  inline ::std::string* release_device_name();
  
  // optional string event_card = 5;
  inline bool has_event_card() const;
  inline void clear_event_card();
  static const int kEventCardFieldNumber = 5;
  inline const ::std::string& event_card() const;
  inline void set_event_card(const ::std::string& value);
  inline void set_event_card(const char* value);
  inline void set_event_card(const char* value, size_t size);
  inline ::std::string* mutable_event_card();
  inline ::std::string* release_event_card();
  
  // optional int32 person_id = 6;
  inline bool has_person_id() const;
  inline void clear_person_id();
  static const int kPersonIdFieldNumber = 6;
  inline ::google::protobuf::int32 person_id() const;
  inline void set_person_id(::google::protobuf::int32 value);
  
  // optional string person_name = 7;
  inline bool has_person_name() const;
  inline void clear_person_name();
  static const int kPersonNameFieldNumber = 7;
  inline const ::std::string& person_name() const;
  inline void set_person_name(const ::std::string& value);
  inline void set_person_name(const char* value);
  inline void set_person_name(const char* value, size_t size);
  inline ::std::string* mutable_person_name();
  inline ::std::string* release_person_name();
  
  // optional int32 dept_id = 8;
  inline bool has_dept_id() const;
  inline void clear_dept_id();
  static const int kDeptIdFieldNumber = 8;
  inline ::google::protobuf::int32 dept_id() const;
  inline void set_dept_id(::google::protobuf::int32 value);
  
  // optional string dept_name = 9;
  inline bool has_dept_name() const;
  inline void clear_dept_name();
  static const int kDeptNameFieldNumber = 9;
  inline const ::std::string& dept_name() const;
  inline void set_dept_name(const ::std::string& value);
  inline void set_dept_name(const char* value);
  inline void set_dept_name(const char* value, size_t size);
  inline ::std::string* mutable_dept_name();
  inline ::std::string* release_dept_name();
  
  // optional string dept_code = 10;
  inline bool has_dept_code() const;
  inline void clear_dept_code();
  static const int kDeptCodeFieldNumber = 10;
  inline const ::std::string& dept_code() const;
  inline void set_dept_code(const ::std::string& value);
  inline void set_dept_code(const char* value);
  inline void set_dept_code(const char* value, size_t size);
  inline ::std::string* mutable_dept_code();
  inline ::std::string* release_dept_code();
  
  // optional int32 deviceL1_id = 11;
  inline bool has_devicel1_id() const;
  inline void clear_devicel1_id();
  static const int kDeviceL1IdFieldNumber = 11;
  inline ::google::protobuf::int32 devicel1_id() const;
  inline void set_devicel1_id(::google::protobuf::int32 value);
  
  // optional int32 deviceL1_type = 12;
  inline bool has_devicel1_type() const;
  inline void clear_devicel1_type();
  static const int kDeviceL1TypeFieldNumber = 12;
  inline ::google::protobuf::int32 devicel1_type() const;
  inline void set_devicel1_type(::google::protobuf::int32 value);
  
  // optional string deviceL1_name = 13;
  inline bool has_devicel1_name() const;
  inline void clear_devicel1_name();
  static const int kDeviceL1NameFieldNumber = 13;
  inline const ::std::string& devicel1_name() const;
  inline void set_devicel1_name(const ::std::string& value);
  inline void set_devicel1_name(const char* value);
  inline void set_devicel1_name(const char* value, size_t size);
  inline ::std::string* mutable_devicel1_name();
  inline ::std::string* release_devicel1_name();
  
  // optional int32 deviceL2_id = 14;
  inline bool has_devicel2_id() const;
  inline void clear_devicel2_id();
  static const int kDeviceL2IdFieldNumber = 14;
  inline ::google::protobuf::int32 devicel2_id() const;
  inline void set_devicel2_id(::google::protobuf::int32 value);
  
  // optional int32 deviceL2_type = 15;
  inline bool has_devicel2_type() const;
  inline void clear_devicel2_type();
  static const int kDeviceL2TypeFieldNumber = 15;
  inline ::google::protobuf::int32 devicel2_type() const;
  inline void set_devicel2_type(::google::protobuf::int32 value);
  
  // optional string deviceL2_name = 16;
  inline bool has_devicel2_name() const;
  inline void clear_devicel2_name();
  static const int kDeviceL2NameFieldNumber = 16;
  inline const ::std::string& devicel2_name() const;
  inline void set_devicel2_name(const ::std::string& value);
  inline void set_devicel2_name(const char* value);
  inline void set_devicel2_name(const char* value, size_t size);
  inline ::std::string* mutable_devicel2_name();
  inline ::std::string* release_devicel2_name();
  
  // optional int32 deviceL3_id = 17;
  inline bool has_devicel3_id() const;
  inline void clear_devicel3_id();
  static const int kDeviceL3IdFieldNumber = 17;
  inline ::google::protobuf::int32 devicel3_id() const;
  inline void set_devicel3_id(::google::protobuf::int32 value);
  
  // optional int32 deviceL3_type = 18;
  inline bool has_devicel3_type() const;
  inline void clear_devicel3_type();
  static const int kDeviceL3TypeFieldNumber = 18;
  inline ::google::protobuf::int32 devicel3_type() const;
  inline void set_devicel3_type(::google::protobuf::int32 value);
  
  // optional string deviceL3_name = 19;
  inline bool has_devicel3_name() const;
  inline void clear_devicel3_name();
  static const int kDeviceL3NameFieldNumber = 19;
  inline const ::std::string& devicel3_name() const;
  inline void set_devicel3_name(const ::std::string& value);
  inline void set_devicel3_name(const char* value);
  inline void set_devicel3_name(const char* value, size_t size);
  inline ::std::string* mutable_devicel3_name();
  inline ::std::string* release_devicel3_name();
  
  // optional int32 in_out = 20;
  inline bool has_in_out() const;
  inline void clear_in_out();
  static const int kInOutFieldNumber = 20;
  inline ::google::protobuf::int32 in_out() const;
  inline void set_in_out(::google::protobuf::int32 value);
  
  // optional string ext_txt = 21;
  inline bool has_ext_txt() const;
  inline void clear_ext_txt();
  static const int kExtTxtFieldNumber = 21;
  inline const ::std::string& ext_txt() const;
  inline void set_ext_txt(const ::std::string& value);
  inline void set_ext_txt(const char* value);
  inline void set_ext_txt(const char* value, size_t size);
  inline ::std::string* mutable_ext_txt();
  inline ::std::string* release_ext_txt();
  
  // optional int32 door_id = 33;
  inline bool has_door_id() const;
  inline void clear_door_id();
  static const int kDoorIdFieldNumber = 33;
  inline ::google::protobuf::int32 door_id() const;
  inline void set_door_id(::google::protobuf::int32 value);
  
  // optional int32 card_status = 34;
  inline bool has_card_status() const;
  inline void clear_card_status();
  static const int kCardStatusFieldNumber = 34;
  inline ::google::protobuf::int32 card_status() const;
  inline void set_card_status(::google::protobuf::int32 value);
  
  // optional string pic_url = 35;
  inline bool has_pic_url() const;
  inline void clear_pic_url();
  static const int kPicUrlFieldNumber = 35;
  inline const ::std::string& pic_url() const;
  inline void set_pic_url(const ::std::string& value);
  inline void set_pic_url(const char* value);
  inline void set_pic_url(const char* value, size_t size);
  inline ::std::string* mutable_pic_url();
  inline ::std::string* release_pic_url();
  
  // @@protoc_insertion_point(class_scope:com.hikvision.cms.api.eps.beds.AccessEventLog)
 private:
  inline void set_has_event_code();
  inline void clear_has_event_code();
  inline void set_has_device_id();
  inline void clear_has_device_id();
  inline void set_has_device_type();
  inline void clear_has_device_type();
  inline void set_has_device_name();
  inline void clear_has_device_name();
  inline void set_has_event_card();
  inline void clear_has_event_card();
  inline void set_has_person_id();
  inline void clear_has_person_id();
  inline void set_has_person_name();
  inline void clear_has_person_name();
  inline void set_has_dept_id();
  inline void clear_has_dept_id();
  inline void set_has_dept_name();
  inline void clear_has_dept_name();
  inline void set_has_dept_code();
  inline void clear_has_dept_code();
  inline void set_has_devicel1_id();
  inline void clear_has_devicel1_id();
  inline void set_has_devicel1_type();
  inline void clear_has_devicel1_type();
  inline void set_has_devicel1_name();
  inline void clear_has_devicel1_name();
  inline void set_has_devicel2_id();
  inline void clear_has_devicel2_id();
  inline void set_has_devicel2_type();
  inline void clear_has_devicel2_type();
  inline void set_has_devicel2_name();
  inline void clear_has_devicel2_name();
  inline void set_has_devicel3_id();
  inline void clear_has_devicel3_id();
  inline void set_has_devicel3_type();
  inline void clear_has_devicel3_type();
  inline void set_has_devicel3_name();
  inline void clear_has_devicel3_name();
  inline void set_has_in_out();
  inline void clear_has_in_out();
  inline void set_has_ext_txt();
  inline void clear_has_ext_txt();
  inline void set_has_door_id();
  inline void clear_has_door_id();
  inline void set_has_card_status();
  inline void clear_has_card_status();
  inline void set_has_pic_url();
  inline void clear_has_pic_url();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 event_code_;
  ::google::protobuf::int32 device_id_;
  ::std::string* device_name_;
  ::google::protobuf::int32 device_type_;
  ::google::protobuf::int32 person_id_;
  ::std::string* event_card_;
  ::std::string* person_name_;
  ::std::string* dept_name_;
  ::google::protobuf::int32 dept_id_;
  ::google::protobuf::int32 devicel1_id_;
  ::std::string* dept_code_;
  ::std::string* devicel1_name_;
  ::google::protobuf::int32 devicel1_type_;
  ::google::protobuf::int32 devicel2_id_;
  ::std::string* devicel2_name_;
  ::google::protobuf::int32 devicel2_type_;
  ::google::protobuf::int32 devicel3_id_;
  ::std::string* devicel3_name_;
  ::google::protobuf::int32 devicel3_type_;
  ::google::protobuf::int32 in_out_;
  ::std::string* ext_txt_;
  ::google::protobuf::int32 door_id_;
  ::google::protobuf::int32 card_status_;
  ::std::string* pic_url_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(24 + 31) / 32];
  
  friend void  protobuf_AddDesc_acs_5fevent_2eproto();
  friend void protobuf_AssignDesc_acs_5fevent_2eproto();
  friend void protobuf_ShutdownFile_acs_5fevent_2eproto();
  
  void InitAsDefaultInstance();
  static AccessEventLog* default_instance_;
};
// ===================================================================


// ===================================================================

// AccessEventLog

// optional int32 event_code = 1;
inline bool AccessEventLog::has_event_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccessEventLog::set_has_event_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccessEventLog::clear_has_event_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccessEventLog::clear_event_code() {
  event_code_ = 0;
  clear_has_event_code();
}
inline ::google::protobuf::int32 AccessEventLog::event_code() const {
  return event_code_;
}
inline void AccessEventLog::set_event_code(::google::protobuf::int32 value) {
  set_has_event_code();
  event_code_ = value;
}

// optional int32 device_id = 2;
inline bool AccessEventLog::has_device_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccessEventLog::set_has_device_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccessEventLog::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccessEventLog::clear_device_id() {
  device_id_ = 0;
  clear_has_device_id();
}
inline ::google::protobuf::int32 AccessEventLog::device_id() const {
  return device_id_;
}
inline void AccessEventLog::set_device_id(::google::protobuf::int32 value) {
  set_has_device_id();
  device_id_ = value;
}

// optional int32 device_type = 3;
inline bool AccessEventLog::has_device_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccessEventLog::set_has_device_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccessEventLog::clear_has_device_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccessEventLog::clear_device_type() {
  device_type_ = 0;
  clear_has_device_type();
}
inline ::google::protobuf::int32 AccessEventLog::device_type() const {
  return device_type_;
}
inline void AccessEventLog::set_device_type(::google::protobuf::int32 value) {
  set_has_device_type();
  device_type_ = value;
}

// optional string device_name = 4;
inline bool AccessEventLog::has_device_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AccessEventLog::set_has_device_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AccessEventLog::clear_has_device_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AccessEventLog::clear_device_name() {
  if (device_name_ != &::google::protobuf::internal::kEmptyString) {
    device_name_->clear();
  }
  clear_has_device_name();
}
inline const ::std::string& AccessEventLog::device_name() const {
  return *device_name_;
}
inline void AccessEventLog::set_device_name(const ::std::string& value) {
  set_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    device_name_ = new ::std::string;
  }
  device_name_->assign(value);
}
inline void AccessEventLog::set_device_name(const char* value) {
  set_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    device_name_ = new ::std::string;
  }
  device_name_->assign(value);
}
inline void AccessEventLog::set_device_name(const char* value, size_t size) {
  set_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    device_name_ = new ::std::string;
  }
  device_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccessEventLog::mutable_device_name() {
  set_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    device_name_ = new ::std::string;
  }
  return device_name_;
}
inline ::std::string* AccessEventLog::release_device_name() {
  clear_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_name_;
    device_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string event_card = 5;
inline bool AccessEventLog::has_event_card() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AccessEventLog::set_has_event_card() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AccessEventLog::clear_has_event_card() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AccessEventLog::clear_event_card() {
  if (event_card_ != &::google::protobuf::internal::kEmptyString) {
    event_card_->clear();
  }
  clear_has_event_card();
}
inline const ::std::string& AccessEventLog::event_card() const {
  return *event_card_;
}
inline void AccessEventLog::set_event_card(const ::std::string& value) {
  set_has_event_card();
  if (event_card_ == &::google::protobuf::internal::kEmptyString) {
    event_card_ = new ::std::string;
  }
  event_card_->assign(value);
}
inline void AccessEventLog::set_event_card(const char* value) {
  set_has_event_card();
  if (event_card_ == &::google::protobuf::internal::kEmptyString) {
    event_card_ = new ::std::string;
  }
  event_card_->assign(value);
}
inline void AccessEventLog::set_event_card(const char* value, size_t size) {
  set_has_event_card();
  if (event_card_ == &::google::protobuf::internal::kEmptyString) {
    event_card_ = new ::std::string;
  }
  event_card_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccessEventLog::mutable_event_card() {
  set_has_event_card();
  if (event_card_ == &::google::protobuf::internal::kEmptyString) {
    event_card_ = new ::std::string;
  }
  return event_card_;
}
inline ::std::string* AccessEventLog::release_event_card() {
  clear_has_event_card();
  if (event_card_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = event_card_;
    event_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 person_id = 6;
inline bool AccessEventLog::has_person_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AccessEventLog::set_has_person_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AccessEventLog::clear_has_person_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AccessEventLog::clear_person_id() {
  person_id_ = 0;
  clear_has_person_id();
}
inline ::google::protobuf::int32 AccessEventLog::person_id() const {
  return person_id_;
}
inline void AccessEventLog::set_person_id(::google::protobuf::int32 value) {
  set_has_person_id();
  person_id_ = value;
}

// optional string person_name = 7;
inline bool AccessEventLog::has_person_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AccessEventLog::set_has_person_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AccessEventLog::clear_has_person_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AccessEventLog::clear_person_name() {
  if (person_name_ != &::google::protobuf::internal::kEmptyString) {
    person_name_->clear();
  }
  clear_has_person_name();
}
inline const ::std::string& AccessEventLog::person_name() const {
  return *person_name_;
}
inline void AccessEventLog::set_person_name(const ::std::string& value) {
  set_has_person_name();
  if (person_name_ == &::google::protobuf::internal::kEmptyString) {
    person_name_ = new ::std::string;
  }
  person_name_->assign(value);
}
inline void AccessEventLog::set_person_name(const char* value) {
  set_has_person_name();
  if (person_name_ == &::google::protobuf::internal::kEmptyString) {
    person_name_ = new ::std::string;
  }
  person_name_->assign(value);
}
inline void AccessEventLog::set_person_name(const char* value, size_t size) {
  set_has_person_name();
  if (person_name_ == &::google::protobuf::internal::kEmptyString) {
    person_name_ = new ::std::string;
  }
  person_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccessEventLog::mutable_person_name() {
  set_has_person_name();
  if (person_name_ == &::google::protobuf::internal::kEmptyString) {
    person_name_ = new ::std::string;
  }
  return person_name_;
}
inline ::std::string* AccessEventLog::release_person_name() {
  clear_has_person_name();
  if (person_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = person_name_;
    person_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 dept_id = 8;
inline bool AccessEventLog::has_dept_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AccessEventLog::set_has_dept_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AccessEventLog::clear_has_dept_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AccessEventLog::clear_dept_id() {
  dept_id_ = 0;
  clear_has_dept_id();
}
inline ::google::protobuf::int32 AccessEventLog::dept_id() const {
  return dept_id_;
}
inline void AccessEventLog::set_dept_id(::google::protobuf::int32 value) {
  set_has_dept_id();
  dept_id_ = value;
}

// optional string dept_name = 9;
inline bool AccessEventLog::has_dept_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AccessEventLog::set_has_dept_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AccessEventLog::clear_has_dept_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AccessEventLog::clear_dept_name() {
  if (dept_name_ != &::google::protobuf::internal::kEmptyString) {
    dept_name_->clear();
  }
  clear_has_dept_name();
}
inline const ::std::string& AccessEventLog::dept_name() const {
  return *dept_name_;
}
inline void AccessEventLog::set_dept_name(const ::std::string& value) {
  set_has_dept_name();
  if (dept_name_ == &::google::protobuf::internal::kEmptyString) {
    dept_name_ = new ::std::string;
  }
  dept_name_->assign(value);
}
inline void AccessEventLog::set_dept_name(const char* value) {
  set_has_dept_name();
  if (dept_name_ == &::google::protobuf::internal::kEmptyString) {
    dept_name_ = new ::std::string;
  }
  dept_name_->assign(value);
}
inline void AccessEventLog::set_dept_name(const char* value, size_t size) {
  set_has_dept_name();
  if (dept_name_ == &::google::protobuf::internal::kEmptyString) {
    dept_name_ = new ::std::string;
  }
  dept_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccessEventLog::mutable_dept_name() {
  set_has_dept_name();
  if (dept_name_ == &::google::protobuf::internal::kEmptyString) {
    dept_name_ = new ::std::string;
  }
  return dept_name_;
}
inline ::std::string* AccessEventLog::release_dept_name() {
  clear_has_dept_name();
  if (dept_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dept_name_;
    dept_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string dept_code = 10;
inline bool AccessEventLog::has_dept_code() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AccessEventLog::set_has_dept_code() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AccessEventLog::clear_has_dept_code() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AccessEventLog::clear_dept_code() {
  if (dept_code_ != &::google::protobuf::internal::kEmptyString) {
    dept_code_->clear();
  }
  clear_has_dept_code();
}
inline const ::std::string& AccessEventLog::dept_code() const {
  return *dept_code_;
}
inline void AccessEventLog::set_dept_code(const ::std::string& value) {
  set_has_dept_code();
  if (dept_code_ == &::google::protobuf::internal::kEmptyString) {
    dept_code_ = new ::std::string;
  }
  dept_code_->assign(value);
}
inline void AccessEventLog::set_dept_code(const char* value) {
  set_has_dept_code();
  if (dept_code_ == &::google::protobuf::internal::kEmptyString) {
    dept_code_ = new ::std::string;
  }
  dept_code_->assign(value);
}
inline void AccessEventLog::set_dept_code(const char* value, size_t size) {
  set_has_dept_code();
  if (dept_code_ == &::google::protobuf::internal::kEmptyString) {
    dept_code_ = new ::std::string;
  }
  dept_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccessEventLog::mutable_dept_code() {
  set_has_dept_code();
  if (dept_code_ == &::google::protobuf::internal::kEmptyString) {
    dept_code_ = new ::std::string;
  }
  return dept_code_;
}
inline ::std::string* AccessEventLog::release_dept_code() {
  clear_has_dept_code();
  if (dept_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dept_code_;
    dept_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 deviceL1_id = 11;
inline bool AccessEventLog::has_devicel1_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AccessEventLog::set_has_devicel1_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AccessEventLog::clear_has_devicel1_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AccessEventLog::clear_devicel1_id() {
  devicel1_id_ = 0;
  clear_has_devicel1_id();
}
inline ::google::protobuf::int32 AccessEventLog::devicel1_id() const {
  return devicel1_id_;
}
inline void AccessEventLog::set_devicel1_id(::google::protobuf::int32 value) {
  set_has_devicel1_id();
  devicel1_id_ = value;
}

// optional int32 deviceL1_type = 12;
inline bool AccessEventLog::has_devicel1_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AccessEventLog::set_has_devicel1_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AccessEventLog::clear_has_devicel1_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AccessEventLog::clear_devicel1_type() {
  devicel1_type_ = 0;
  clear_has_devicel1_type();
}
inline ::google::protobuf::int32 AccessEventLog::devicel1_type() const {
  return devicel1_type_;
}
inline void AccessEventLog::set_devicel1_type(::google::protobuf::int32 value) {
  set_has_devicel1_type();
  devicel1_type_ = value;
}

// optional string deviceL1_name = 13;
inline bool AccessEventLog::has_devicel1_name() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void AccessEventLog::set_has_devicel1_name() {
  _has_bits_[0] |= 0x00001000u;
}
inline void AccessEventLog::clear_has_devicel1_name() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void AccessEventLog::clear_devicel1_name() {
  if (devicel1_name_ != &::google::protobuf::internal::kEmptyString) {
    devicel1_name_->clear();
  }
  clear_has_devicel1_name();
}
inline const ::std::string& AccessEventLog::devicel1_name() const {
  return *devicel1_name_;
}
inline void AccessEventLog::set_devicel1_name(const ::std::string& value) {
  set_has_devicel1_name();
  if (devicel1_name_ == &::google::protobuf::internal::kEmptyString) {
    devicel1_name_ = new ::std::string;
  }
  devicel1_name_->assign(value);
}
inline void AccessEventLog::set_devicel1_name(const char* value) {
  set_has_devicel1_name();
  if (devicel1_name_ == &::google::protobuf::internal::kEmptyString) {
    devicel1_name_ = new ::std::string;
  }
  devicel1_name_->assign(value);
}
inline void AccessEventLog::set_devicel1_name(const char* value, size_t size) {
  set_has_devicel1_name();
  if (devicel1_name_ == &::google::protobuf::internal::kEmptyString) {
    devicel1_name_ = new ::std::string;
  }
  devicel1_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccessEventLog::mutable_devicel1_name() {
  set_has_devicel1_name();
  if (devicel1_name_ == &::google::protobuf::internal::kEmptyString) {
    devicel1_name_ = new ::std::string;
  }
  return devicel1_name_;
}
inline ::std::string* AccessEventLog::release_devicel1_name() {
  clear_has_devicel1_name();
  if (devicel1_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = devicel1_name_;
    devicel1_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 deviceL2_id = 14;
inline bool AccessEventLog::has_devicel2_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void AccessEventLog::set_has_devicel2_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void AccessEventLog::clear_has_devicel2_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void AccessEventLog::clear_devicel2_id() {
  devicel2_id_ = 0;
  clear_has_devicel2_id();
}
inline ::google::protobuf::int32 AccessEventLog::devicel2_id() const {
  return devicel2_id_;
}
inline void AccessEventLog::set_devicel2_id(::google::protobuf::int32 value) {
  set_has_devicel2_id();
  devicel2_id_ = value;
}

// optional int32 deviceL2_type = 15;
inline bool AccessEventLog::has_devicel2_type() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void AccessEventLog::set_has_devicel2_type() {
  _has_bits_[0] |= 0x00004000u;
}
inline void AccessEventLog::clear_has_devicel2_type() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void AccessEventLog::clear_devicel2_type() {
  devicel2_type_ = 0;
  clear_has_devicel2_type();
}
inline ::google::protobuf::int32 AccessEventLog::devicel2_type() const {
  return devicel2_type_;
}
inline void AccessEventLog::set_devicel2_type(::google::protobuf::int32 value) {
  set_has_devicel2_type();
  devicel2_type_ = value;
}

// optional string deviceL2_name = 16;
inline bool AccessEventLog::has_devicel2_name() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void AccessEventLog::set_has_devicel2_name() {
  _has_bits_[0] |= 0x00008000u;
}
inline void AccessEventLog::clear_has_devicel2_name() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void AccessEventLog::clear_devicel2_name() {
  if (devicel2_name_ != &::google::protobuf::internal::kEmptyString) {
    devicel2_name_->clear();
  }
  clear_has_devicel2_name();
}
inline const ::std::string& AccessEventLog::devicel2_name() const {
  return *devicel2_name_;
}
inline void AccessEventLog::set_devicel2_name(const ::std::string& value) {
  set_has_devicel2_name();
  if (devicel2_name_ == &::google::protobuf::internal::kEmptyString) {
    devicel2_name_ = new ::std::string;
  }
  devicel2_name_->assign(value);
}
inline void AccessEventLog::set_devicel2_name(const char* value) {
  set_has_devicel2_name();
  if (devicel2_name_ == &::google::protobuf::internal::kEmptyString) {
    devicel2_name_ = new ::std::string;
  }
  devicel2_name_->assign(value);
}
inline void AccessEventLog::set_devicel2_name(const char* value, size_t size) {
  set_has_devicel2_name();
  if (devicel2_name_ == &::google::protobuf::internal::kEmptyString) {
    devicel2_name_ = new ::std::string;
  }
  devicel2_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccessEventLog::mutable_devicel2_name() {
  set_has_devicel2_name();
  if (devicel2_name_ == &::google::protobuf::internal::kEmptyString) {
    devicel2_name_ = new ::std::string;
  }
  return devicel2_name_;
}
inline ::std::string* AccessEventLog::release_devicel2_name() {
  clear_has_devicel2_name();
  if (devicel2_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = devicel2_name_;
    devicel2_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 deviceL3_id = 17;
inline bool AccessEventLog::has_devicel3_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void AccessEventLog::set_has_devicel3_id() {
  _has_bits_[0] |= 0x00010000u;
}
inline void AccessEventLog::clear_has_devicel3_id() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void AccessEventLog::clear_devicel3_id() {
  devicel3_id_ = 0;
  clear_has_devicel3_id();
}
inline ::google::protobuf::int32 AccessEventLog::devicel3_id() const {
  return devicel3_id_;
}
inline void AccessEventLog::set_devicel3_id(::google::protobuf::int32 value) {
  set_has_devicel3_id();
  devicel3_id_ = value;
}

// optional int32 deviceL3_type = 18;
inline bool AccessEventLog::has_devicel3_type() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void AccessEventLog::set_has_devicel3_type() {
  _has_bits_[0] |= 0x00020000u;
}
inline void AccessEventLog::clear_has_devicel3_type() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void AccessEventLog::clear_devicel3_type() {
  devicel3_type_ = 0;
  clear_has_devicel3_type();
}
inline ::google::protobuf::int32 AccessEventLog::devicel3_type() const {
  return devicel3_type_;
}
inline void AccessEventLog::set_devicel3_type(::google::protobuf::int32 value) {
  set_has_devicel3_type();
  devicel3_type_ = value;
}

// optional string deviceL3_name = 19;
inline bool AccessEventLog::has_devicel3_name() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void AccessEventLog::set_has_devicel3_name() {
  _has_bits_[0] |= 0x00040000u;
}
inline void AccessEventLog::clear_has_devicel3_name() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void AccessEventLog::clear_devicel3_name() {
  if (devicel3_name_ != &::google::protobuf::internal::kEmptyString) {
    devicel3_name_->clear();
  }
  clear_has_devicel3_name();
}
inline const ::std::string& AccessEventLog::devicel3_name() const {
  return *devicel3_name_;
}
inline void AccessEventLog::set_devicel3_name(const ::std::string& value) {
  set_has_devicel3_name();
  if (devicel3_name_ == &::google::protobuf::internal::kEmptyString) {
    devicel3_name_ = new ::std::string;
  }
  devicel3_name_->assign(value);
}
inline void AccessEventLog::set_devicel3_name(const char* value) {
  set_has_devicel3_name();
  if (devicel3_name_ == &::google::protobuf::internal::kEmptyString) {
    devicel3_name_ = new ::std::string;
  }
  devicel3_name_->assign(value);
}
inline void AccessEventLog::set_devicel3_name(const char* value, size_t size) {
  set_has_devicel3_name();
  if (devicel3_name_ == &::google::protobuf::internal::kEmptyString) {
    devicel3_name_ = new ::std::string;
  }
  devicel3_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccessEventLog::mutable_devicel3_name() {
  set_has_devicel3_name();
  if (devicel3_name_ == &::google::protobuf::internal::kEmptyString) {
    devicel3_name_ = new ::std::string;
  }
  return devicel3_name_;
}
inline ::std::string* AccessEventLog::release_devicel3_name() {
  clear_has_devicel3_name();
  if (devicel3_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = devicel3_name_;
    devicel3_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 in_out = 20;
inline bool AccessEventLog::has_in_out() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void AccessEventLog::set_has_in_out() {
  _has_bits_[0] |= 0x00080000u;
}
inline void AccessEventLog::clear_has_in_out() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void AccessEventLog::clear_in_out() {
  in_out_ = 0;
  clear_has_in_out();
}
inline ::google::protobuf::int32 AccessEventLog::in_out() const {
  return in_out_;
}
inline void AccessEventLog::set_in_out(::google::protobuf::int32 value) {
  set_has_in_out();
  in_out_ = value;
}

// optional string ext_txt = 21;
inline bool AccessEventLog::has_ext_txt() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void AccessEventLog::set_has_ext_txt() {
  _has_bits_[0] |= 0x00100000u;
}
inline void AccessEventLog::clear_has_ext_txt() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void AccessEventLog::clear_ext_txt() {
  if (ext_txt_ != &::google::protobuf::internal::kEmptyString) {
    ext_txt_->clear();
  }
  clear_has_ext_txt();
}
inline const ::std::string& AccessEventLog::ext_txt() const {
  return *ext_txt_;
}
inline void AccessEventLog::set_ext_txt(const ::std::string& value) {
  set_has_ext_txt();
  if (ext_txt_ == &::google::protobuf::internal::kEmptyString) {
    ext_txt_ = new ::std::string;
  }
  ext_txt_->assign(value);
}
inline void AccessEventLog::set_ext_txt(const char* value) {
  set_has_ext_txt();
  if (ext_txt_ == &::google::protobuf::internal::kEmptyString) {
    ext_txt_ = new ::std::string;
  }
  ext_txt_->assign(value);
}
inline void AccessEventLog::set_ext_txt(const char* value, size_t size) {
  set_has_ext_txt();
  if (ext_txt_ == &::google::protobuf::internal::kEmptyString) {
    ext_txt_ = new ::std::string;
  }
  ext_txt_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccessEventLog::mutable_ext_txt() {
  set_has_ext_txt();
  if (ext_txt_ == &::google::protobuf::internal::kEmptyString) {
    ext_txt_ = new ::std::string;
  }
  return ext_txt_;
}
inline ::std::string* AccessEventLog::release_ext_txt() {
  clear_has_ext_txt();
  if (ext_txt_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ext_txt_;
    ext_txt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 door_id = 33;
inline bool AccessEventLog::has_door_id() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void AccessEventLog::set_has_door_id() {
  _has_bits_[0] |= 0x00200000u;
}
inline void AccessEventLog::clear_has_door_id() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void AccessEventLog::clear_door_id() {
  door_id_ = 0;
  clear_has_door_id();
}
inline ::google::protobuf::int32 AccessEventLog::door_id() const {
  return door_id_;
}
inline void AccessEventLog::set_door_id(::google::protobuf::int32 value) {
  set_has_door_id();
  door_id_ = value;
}

// optional int32 card_status = 34;
inline bool AccessEventLog::has_card_status() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void AccessEventLog::set_has_card_status() {
  _has_bits_[0] |= 0x00400000u;
}
inline void AccessEventLog::clear_has_card_status() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void AccessEventLog::clear_card_status() {
  card_status_ = 0;
  clear_has_card_status();
}
inline ::google::protobuf::int32 AccessEventLog::card_status() const {
  return card_status_;
}
inline void AccessEventLog::set_card_status(::google::protobuf::int32 value) {
  set_has_card_status();
  card_status_ = value;
}

// optional string pic_url = 35;
inline bool AccessEventLog::has_pic_url() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void AccessEventLog::set_has_pic_url() {
  _has_bits_[0] |= 0x00800000u;
}
inline void AccessEventLog::clear_has_pic_url() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void AccessEventLog::clear_pic_url() {
  if (pic_url_ != &::google::protobuf::internal::kEmptyString) {
    pic_url_->clear();
  }
  clear_has_pic_url();
}
inline const ::std::string& AccessEventLog::pic_url() const {
  return *pic_url_;
}
inline void AccessEventLog::set_pic_url(const ::std::string& value) {
  set_has_pic_url();
  if (pic_url_ == &::google::protobuf::internal::kEmptyString) {
    pic_url_ = new ::std::string;
  }
  pic_url_->assign(value);
}
inline void AccessEventLog::set_pic_url(const char* value) {
  set_has_pic_url();
  if (pic_url_ == &::google::protobuf::internal::kEmptyString) {
    pic_url_ = new ::std::string;
  }
  pic_url_->assign(value);
}
inline void AccessEventLog::set_pic_url(const char* value, size_t size) {
  set_has_pic_url();
  if (pic_url_ == &::google::protobuf::internal::kEmptyString) {
    pic_url_ = new ::std::string;
  }
  pic_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccessEventLog::mutable_pic_url() {
  set_has_pic_url();
  if (pic_url_ == &::google::protobuf::internal::kEmptyString) {
    pic_url_ = new ::std::string;
  }
  return pic_url_;
}
inline ::std::string* AccessEventLog::release_pic_url() {
  clear_has_pic_url();
  if (pic_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_url_;
    pic_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace beds
}  // namespace eps
}  // namespace api
}  // namespace cms
}  // namespace hikvision
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_acs_5fevent_2eproto__INCLUDED
