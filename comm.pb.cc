// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "comm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace hikvision {
namespace cms {
namespace api {
namespace eps {
namespace beds {

namespace {

const ::google::protobuf::Descriptor* TriggerResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TriggerResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommEventTrig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommEventTrig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EventState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgCmdType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_comm_2eproto() {
  protobuf_AddDesc_comm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "comm.proto");
  GOOGLE_CHECK(file != NULL);
  TriggerResult_descriptor_ = file->message_type(0);
  static const int TriggerResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerResult, trigger_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerResult, trigger_ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerResult, trigger_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerResult, trigger_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerResult, err_msg_),
  };
  TriggerResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TriggerResult_descriptor_,
      TriggerResult::default_instance_,
      TriggerResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TriggerResult));
  CommEventTrig_descriptor_ = file->message_type(1);
  static const int CommEventTrig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommEventTrig, trigger_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommEventTrig, trigger_info_),
  };
  CommEventTrig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommEventTrig_descriptor_,
      CommEventTrig::default_instance_,
      CommEventTrig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommEventTrig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommEventTrig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommEventTrig));
  EventState_descriptor_ = file->enum_type(0);
  MsgCmdType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_comm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TriggerResult_descriptor_, &TriggerResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommEventTrig_descriptor_, &CommEventTrig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_comm_2eproto() {
  delete TriggerResult::default_instance_;
  delete TriggerResult_reflection_;
  delete CommEventTrig::default_instance_;
  delete CommEventTrig_reflection_;
}

void protobuf_AddDesc_comm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ncomm.proto\022\036com.hikvision.cms.api.eps."
    "beds\"w\n\rTriggerResult\022\024\n\014trigger_type\030\001 "
    "\002(\005\022\023\n\013trigger_ret\030\002 \003(\005\022\024\n\014trigger_time"
    "\030\003 \002(\t\022\024\n\014trigger_info\030! \001(\t\022\017\n\007err_msg\030"
    "\" \001(\t\";\n\rCommEventTrig\022\024\n\014trigger_type\030\001"
    " \002(\005\022\024\n\014trigger_info\030\002 \002(\014*\201\001\n\nEventStat"
    "e\022\027\n\023EVENT_STATE_INSTANT\020\000\022\025\n\021EVENT_STAT"
    "E_START\020\001\022\024\n\020EVENT_STATE_STOP\020\002\022\025\n\021EVENT"
    "_STATE_PULSE\020\003\022\026\n\022EVENT_STATE_UPDATE\020\004*\321"
    "\001\n\nMsgCmdType\022\027\n\021MSG_CMD_TYPE_MASK\020\200\376\003\022\031"
    "\n\024MSG_CMD_MANUAL_EVENT\020\201\002\022\032\n\025MSG_CMD_CON"
    "FIRM_EVENT\020\202\002\022\031\n\024MSG_CMD_REPORT_EVENT\020\201\004"
    "\022\032\n\025MSG_CMD_SUBRECV_EVENT\020\202\004\022\035\n\030MSG_CMD_"
    "EVENT_NOTIFY_REQ\020\201\006\022\035\n\030MSG_CMD_EVENT_NOT"
    "IFY_RSP\020\202\006", 570);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "comm.proto", &protobuf_RegisterTypes);
  TriggerResult::default_instance_ = new TriggerResult();
  CommEventTrig::default_instance_ = new CommEventTrig();
  TriggerResult::default_instance_->InitAsDefaultInstance();
  CommEventTrig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_comm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_comm_2eproto {
  StaticDescriptorInitializer_comm_2eproto() {
    protobuf_AddDesc_comm_2eproto();
  }
} static_descriptor_initializer_comm_2eproto_;

const ::google::protobuf::EnumDescriptor* EventState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventState_descriptor_;
}
bool EventState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MsgCmdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCmdType_descriptor_;
}
bool MsgCmdType_IsValid(int value) {
  switch(value) {
    case 257:
    case 258:
    case 513:
    case 514:
    case 769:
    case 770:
    case 65280:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TriggerResult::kTriggerTypeFieldNumber;
const int TriggerResult::kTriggerRetFieldNumber;
const int TriggerResult::kTriggerTimeFieldNumber;
const int TriggerResult::kTriggerInfoFieldNumber;
const int TriggerResult::kErrMsgFieldNumber;
#endif  // !_MSC_VER

TriggerResult::TriggerResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TriggerResult::InitAsDefaultInstance() {
}

TriggerResult::TriggerResult(const TriggerResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TriggerResult::SharedCtor() {
  _cached_size_ = 0;
  trigger_type_ = 0;
  trigger_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trigger_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  err_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TriggerResult::~TriggerResult() {
  SharedDtor();
}

void TriggerResult::SharedDtor() {
  if (trigger_time_ != &::google::protobuf::internal::kEmptyString) {
    delete trigger_time_;
  }
  if (trigger_info_ != &::google::protobuf::internal::kEmptyString) {
    delete trigger_info_;
  }
  if (err_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete err_msg_;
  }
  if (this != default_instance_) {
  }
}

void TriggerResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TriggerResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TriggerResult_descriptor_;
}

const TriggerResult& TriggerResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();  return *default_instance_;
}

TriggerResult* TriggerResult::default_instance_ = NULL;

TriggerResult* TriggerResult::New() const {
  return new TriggerResult;
}

void TriggerResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    trigger_type_ = 0;
    if (has_trigger_time()) {
      if (trigger_time_ != &::google::protobuf::internal::kEmptyString) {
        trigger_time_->clear();
      }
    }
    if (has_trigger_info()) {
      if (trigger_info_ != &::google::protobuf::internal::kEmptyString) {
        trigger_info_->clear();
      }
    }
    if (has_err_msg()) {
      if (err_msg_ != &::google::protobuf::internal::kEmptyString) {
        err_msg_->clear();
      }
    }
  }
  trigger_ret_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TriggerResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 trigger_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trigger_type_)));
          set_has_trigger_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_trigger_ret;
        break;
      }
      
      // repeated int32 trigger_ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trigger_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_trigger_ret())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_trigger_ret())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_trigger_ret;
        if (input->ExpectTag(26)) goto parse_trigger_time;
        break;
      }
      
      // required string trigger_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trigger_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trigger_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trigger_time().data(), this->trigger_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_trigger_info;
        break;
      }
      
      // optional string trigger_info = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trigger_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trigger_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trigger_info().data(), this->trigger_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_err_msg;
        break;
      }
      
      // optional string err_msg = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err_msg().data(), this->err_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TriggerResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 trigger_type = 1;
  if (has_trigger_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trigger_type(), output);
  }
  
  // repeated int32 trigger_ret = 2;
  for (int i = 0; i < this->trigger_ret_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->trigger_ret(i), output);
  }
  
  // required string trigger_time = 3;
  if (has_trigger_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trigger_time().data(), this->trigger_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->trigger_time(), output);
  }
  
  // optional string trigger_info = 33;
  if (has_trigger_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trigger_info().data(), this->trigger_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->trigger_info(), output);
  }
  
  // optional string err_msg = 34;
  if (has_err_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err_msg().data(), this->err_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      34, this->err_msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TriggerResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 trigger_type = 1;
  if (has_trigger_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trigger_type(), target);
  }
  
  // repeated int32 trigger_ret = 2;
  for (int i = 0; i < this->trigger_ret_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->trigger_ret(i), target);
  }
  
  // required string trigger_time = 3;
  if (has_trigger_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trigger_time().data(), this->trigger_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->trigger_time(), target);
  }
  
  // optional string trigger_info = 33;
  if (has_trigger_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trigger_info().data(), this->trigger_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->trigger_info(), target);
  }
  
  // optional string err_msg = 34;
  if (has_err_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err_msg().data(), this->err_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->err_msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TriggerResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 trigger_type = 1;
    if (has_trigger_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trigger_type());
    }
    
    // required string trigger_time = 3;
    if (has_trigger_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trigger_time());
    }
    
    // optional string trigger_info = 33;
    if (has_trigger_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trigger_info());
    }
    
    // optional string err_msg = 34;
    if (has_err_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err_msg());
    }
    
  }
  // repeated int32 trigger_ret = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->trigger_ret_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->trigger_ret(i));
    }
    total_size += 1 * this->trigger_ret_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TriggerResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TriggerResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TriggerResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TriggerResult::MergeFrom(const TriggerResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  trigger_ret_.MergeFrom(from.trigger_ret_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trigger_type()) {
      set_trigger_type(from.trigger_type());
    }
    if (from.has_trigger_time()) {
      set_trigger_time(from.trigger_time());
    }
    if (from.has_trigger_info()) {
      set_trigger_info(from.trigger_info());
    }
    if (from.has_err_msg()) {
      set_err_msg(from.err_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TriggerResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TriggerResult::CopyFrom(const TriggerResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TriggerResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  return true;
}

void TriggerResult::Swap(TriggerResult* other) {
  if (other != this) {
    std::swap(trigger_type_, other->trigger_type_);
    trigger_ret_.Swap(&other->trigger_ret_);
    std::swap(trigger_time_, other->trigger_time_);
    std::swap(trigger_info_, other->trigger_info_);
    std::swap(err_msg_, other->err_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TriggerResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TriggerResult_descriptor_;
  metadata.reflection = TriggerResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommEventTrig::kTriggerTypeFieldNumber;
const int CommEventTrig::kTriggerInfoFieldNumber;
#endif  // !_MSC_VER

CommEventTrig::CommEventTrig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommEventTrig::InitAsDefaultInstance() {
}

CommEventTrig::CommEventTrig(const CommEventTrig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommEventTrig::SharedCtor() {
  _cached_size_ = 0;
  trigger_type_ = 0;
  trigger_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommEventTrig::~CommEventTrig() {
  SharedDtor();
}

void CommEventTrig::SharedDtor() {
  if (trigger_info_ != &::google::protobuf::internal::kEmptyString) {
    delete trigger_info_;
  }
  if (this != default_instance_) {
  }
}

void CommEventTrig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommEventTrig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommEventTrig_descriptor_;
}

const CommEventTrig& CommEventTrig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();  return *default_instance_;
}

CommEventTrig* CommEventTrig::default_instance_ = NULL;

CommEventTrig* CommEventTrig::New() const {
  return new CommEventTrig;
}

void CommEventTrig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    trigger_type_ = 0;
    if (has_trigger_info()) {
      if (trigger_info_ != &::google::protobuf::internal::kEmptyString) {
        trigger_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommEventTrig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 trigger_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trigger_type_)));
          set_has_trigger_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_trigger_info;
        break;
      }
      
      // required bytes trigger_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trigger_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_trigger_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommEventTrig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 trigger_type = 1;
  if (has_trigger_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trigger_type(), output);
  }
  
  // required bytes trigger_info = 2;
  if (has_trigger_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->trigger_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommEventTrig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 trigger_type = 1;
  if (has_trigger_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trigger_type(), target);
  }
  
  // required bytes trigger_info = 2;
  if (has_trigger_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->trigger_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommEventTrig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 trigger_type = 1;
    if (has_trigger_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trigger_type());
    }
    
    // required bytes trigger_info = 2;
    if (has_trigger_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->trigger_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommEventTrig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommEventTrig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommEventTrig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommEventTrig::MergeFrom(const CommEventTrig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trigger_type()) {
      set_trigger_type(from.trigger_type());
    }
    if (from.has_trigger_info()) {
      set_trigger_info(from.trigger_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommEventTrig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommEventTrig::CopyFrom(const CommEventTrig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommEventTrig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CommEventTrig::Swap(CommEventTrig* other) {
  if (other != this) {
    std::swap(trigger_type_, other->trigger_type_);
    std::swap(trigger_info_, other->trigger_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommEventTrig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommEventTrig_descriptor_;
  metadata.reflection = CommEventTrig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace beds
}  // namespace eps
}  // namespace api
}  // namespace cms
}  // namespace hikvision
}  // namespace com

// @@protoc_insertion_point(global_scope)
