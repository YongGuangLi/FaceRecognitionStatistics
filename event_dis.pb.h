// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event_dis.proto

#ifndef PROTOBUF_event_5fdis_2eproto__INCLUDED
#define PROTOBUF_event_5fdis_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "comm.pb.h"
// @@protoc_insertion_point(includes)

namespace com {
namespace hikvision {
namespace cms {
namespace api {
namespace eps {
namespace beds {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_event_5fdis_2eproto();
void protobuf_AssignDesc_event_5fdis_2eproto();
void protobuf_ShutdownFile_event_5fdis_2eproto();

class CommEventLog;

// ===================================================================

class CommEventLog : public ::google::protobuf::Message {
 public:
  CommEventLog();
  virtual ~CommEventLog();
  
  CommEventLog(const CommEventLog& from);
  
  inline CommEventLog& operator=(const CommEventLog& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommEventLog& default_instance();
  
  void Swap(CommEventLog* other);
  
  // implements Message ----------------------------------------------
  
  CommEventLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommEventLog& from);
  void MergeFrom(const CommEventLog& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string log_id = 1;
  inline bool has_log_id() const;
  inline void clear_log_id();
  static const int kLogIdFieldNumber = 1;
  inline const ::std::string& log_id() const;
  inline void set_log_id(const ::std::string& value);
  inline void set_log_id(const char* value);
  inline void set_log_id(const char* value, size_t size);
  inline ::std::string* mutable_log_id();
  inline ::std::string* release_log_id();
  
  // required int32 event_state = 2;
  inline bool has_event_state() const;
  inline void clear_event_state();
  static const int kEventStateFieldNumber = 2;
  inline ::google::protobuf::int32 event_state() const;
  inline void set_event_state(::google::protobuf::int32 value);
  
  // optional int32 event_level = 3;
  inline bool has_event_level() const;
  inline void clear_event_level();
  static const int kEventLevelFieldNumber = 3;
  inline ::google::protobuf::int32 event_level() const;
  inline void set_event_level(::google::protobuf::int32 value);
  
  // optional string unit_idx = 4;
  inline bool has_unit_idx() const;
  inline void clear_unit_idx();
  static const int kUnitIdxFieldNumber = 4;
  inline const ::std::string& unit_idx() const;
  inline void set_unit_idx(const ::std::string& value);
  inline void set_unit_idx(const char* value);
  inline void set_unit_idx(const char* value, size_t size);
  inline ::std::string* mutable_unit_idx();
  inline ::std::string* release_unit_idx();
  
  // optional int32 event_type = 5;
  inline bool has_event_type() const;
  inline void clear_event_type();
  static const int kEventTypeFieldNumber = 5;
  inline ::google::protobuf::int32 event_type() const;
  inline void set_event_type(::google::protobuf::int32 value);
  
  // optional string event_type_name = 6;
  inline bool has_event_type_name() const;
  inline void clear_event_type_name();
  static const int kEventTypeNameFieldNumber = 6;
  inline const ::std::string& event_type_name() const;
  inline void set_event_type_name(const ::std::string& value);
  inline void set_event_type_name(const char* value);
  inline void set_event_type_name(const char* value, size_t size);
  inline ::std::string* mutable_event_type_name();
  inline ::std::string* release_event_type_name();
  
  // optional int32 sub_sys_type = 7;
  inline bool has_sub_sys_type() const;
  inline void clear_sub_sys_type();
  static const int kSubSysTypeFieldNumber = 7;
  inline ::google::protobuf::int32 sub_sys_type() const;
  inline void set_sub_sys_type(::google::protobuf::int32 value);
  
  // optional string event_name = 8;
  inline bool has_event_name() const;
  inline void clear_event_name();
  static const int kEventNameFieldNumber = 8;
  inline const ::std::string& event_name() const;
  inline void set_event_name(const ::std::string& value);
  inline void set_event_name(const char* value);
  inline void set_event_name(const char* value, size_t size);
  inline ::std::string* mutable_event_name();
  inline ::std::string* release_event_name();
  
  // optional string start_time = 9;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 9;
  inline const ::std::string& start_time() const;
  inline void set_start_time(const ::std::string& value);
  inline void set_start_time(const char* value);
  inline void set_start_time(const char* value, size_t size);
  inline ::std::string* mutable_start_time();
  inline ::std::string* release_start_time();
  
  // optional string stop_time = 10;
  inline bool has_stop_time() const;
  inline void clear_stop_time();
  static const int kStopTimeFieldNumber = 10;
  inline const ::std::string& stop_time() const;
  inline void set_stop_time(const ::std::string& value);
  inline void set_stop_time(const char* value);
  inline void set_stop_time(const char* value, size_t size);
  inline ::std::string* mutable_stop_time();
  inline ::std::string* release_stop_time();
  
  // optional string source_idx = 11;
  inline bool has_source_idx() const;
  inline void clear_source_idx();
  static const int kSourceIdxFieldNumber = 11;
  inline const ::std::string& source_idx() const;
  inline void set_source_idx(const ::std::string& value);
  inline void set_source_idx(const char* value);
  inline void set_source_idx(const char* value, size_t size);
  inline ::std::string* mutable_source_idx();
  inline ::std::string* release_source_idx();
  
  // optional int32 source_type = 12;
  inline bool has_source_type() const;
  inline void clear_source_type();
  static const int kSourceTypeFieldNumber = 12;
  inline ::google::protobuf::int32 source_type() const;
  inline void set_source_type(::google::protobuf::int32 value);
  
  // optional string source_name = 13;
  inline bool has_source_name() const;
  inline void clear_source_name();
  static const int kSourceNameFieldNumber = 13;
  inline const ::std::string& source_name() const;
  inline void set_source_name(const ::std::string& value);
  inline void set_source_name(const char* value);
  inline void set_source_name(const char* value, size_t size);
  inline ::std::string* mutable_source_name();
  inline ::std::string* release_source_name();
  
  // optional string log_txt = 14;
  inline bool has_log_txt() const;
  inline void clear_log_txt();
  static const int kLogTxtFieldNumber = 14;
  inline const ::std::string& log_txt() const;
  inline void set_log_txt(const ::std::string& value);
  inline void set_log_txt(const char* value);
  inline void set_log_txt(const char* value, size_t size);
  inline ::std::string* mutable_log_txt();
  inline ::std::string* release_log_txt();
  
  // optional string region_idx = 15;
  inline bool has_region_idx() const;
  inline void clear_region_idx();
  static const int kRegionIdxFieldNumber = 15;
  inline const ::std::string& region_idx() const;
  inline void set_region_idx(const ::std::string& value);
  inline void set_region_idx(const char* value);
  inline void set_region_idx(const char* value, size_t size);
  inline ::std::string* mutable_region_idx();
  inline ::std::string* release_region_idx();
  
  // optional bytes ext_info = 20;
  inline bool has_ext_info() const;
  inline void clear_ext_info();
  static const int kExtInfoFieldNumber = 20;
  inline const ::std::string& ext_info() const;
  inline void set_ext_info(const ::std::string& value);
  inline void set_ext_info(const char* value);
  inline void set_ext_info(const void* value, size_t size);
  inline ::std::string* mutable_ext_info();
  inline ::std::string* release_ext_info();
  
  // repeated int32 user_id = 21;
  inline int user_id_size() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 21;
  inline ::google::protobuf::int32 user_id(int index) const;
  inline void set_user_id(int index, ::google::protobuf::int32 value);
  inline void add_user_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      user_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_user_id();
  
  // repeated .com.hikvision.cms.api.eps.beds.TriggerResult rslt_msg = 33;
  inline int rslt_msg_size() const;
  inline void clear_rslt_msg();
  static const int kRsltMsgFieldNumber = 33;
  inline const ::com::hikvision::cms::api::eps::beds::TriggerResult& rslt_msg(int index) const;
  inline ::com::hikvision::cms::api::eps::beds::TriggerResult* mutable_rslt_msg(int index);
  inline ::com::hikvision::cms::api::eps::beds::TriggerResult* add_rslt_msg();
  inline const ::google::protobuf::RepeatedPtrField< ::com::hikvision::cms::api::eps::beds::TriggerResult >&
      rslt_msg() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::hikvision::cms::api::eps::beds::TriggerResult >*
      mutable_rslt_msg();
  
  // repeated .com.hikvision.cms.api.eps.beds.CommEventTrig trig_info = 34;
  inline int trig_info_size() const;
  inline void clear_trig_info();
  static const int kTrigInfoFieldNumber = 34;
  inline const ::com::hikvision::cms::api::eps::beds::CommEventTrig& trig_info(int index) const;
  inline ::com::hikvision::cms::api::eps::beds::CommEventTrig* mutable_trig_info(int index);
  inline ::com::hikvision::cms::api::eps::beds::CommEventTrig* add_trig_info();
  inline const ::google::protobuf::RepeatedPtrField< ::com::hikvision::cms::api::eps::beds::CommEventTrig >&
      trig_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::hikvision::cms::api::eps::beds::CommEventTrig >*
      mutable_trig_info();
  
  // @@protoc_insertion_point(class_scope:com.hikvision.cms.api.eps.beds.CommEventLog)
 private:
  inline void set_has_log_id();
  inline void clear_has_log_id();
  inline void set_has_event_state();
  inline void clear_has_event_state();
  inline void set_has_event_level();
  inline void clear_has_event_level();
  inline void set_has_unit_idx();
  inline void clear_has_unit_idx();
  inline void set_has_event_type();
  inline void clear_has_event_type();
  inline void set_has_event_type_name();
  inline void clear_has_event_type_name();
  inline void set_has_sub_sys_type();
  inline void clear_has_sub_sys_type();
  inline void set_has_event_name();
  inline void clear_has_event_name();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_stop_time();
  inline void clear_has_stop_time();
  inline void set_has_source_idx();
  inline void clear_has_source_idx();
  inline void set_has_source_type();
  inline void clear_has_source_type();
  inline void set_has_source_name();
  inline void clear_has_source_name();
  inline void set_has_log_txt();
  inline void clear_has_log_txt();
  inline void set_has_region_idx();
  inline void clear_has_region_idx();
  inline void set_has_ext_info();
  inline void clear_has_ext_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* log_id_;
  ::google::protobuf::int32 event_state_;
  ::google::protobuf::int32 event_level_;
  ::std::string* unit_idx_;
  ::std::string* event_type_name_;
  ::google::protobuf::int32 event_type_;
  ::google::protobuf::int32 sub_sys_type_;
  ::std::string* event_name_;
  ::std::string* start_time_;
  ::std::string* stop_time_;
  ::std::string* source_idx_;
  ::std::string* source_name_;
  ::std::string* log_txt_;
  ::std::string* region_idx_;
  ::std::string* ext_info_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > user_id_;
  ::google::protobuf::RepeatedPtrField< ::com::hikvision::cms::api::eps::beds::TriggerResult > rslt_msg_;
  ::google::protobuf::RepeatedPtrField< ::com::hikvision::cms::api::eps::beds::CommEventTrig > trig_info_;
  ::google::protobuf::int32 source_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];
  
  friend void  protobuf_AddDesc_event_5fdis_2eproto();
  friend void protobuf_AssignDesc_event_5fdis_2eproto();
  friend void protobuf_ShutdownFile_event_5fdis_2eproto();
  
  void InitAsDefaultInstance();
  static CommEventLog* default_instance_;
};
// ===================================================================


// ===================================================================

// CommEventLog

// required string log_id = 1;
inline bool CommEventLog::has_log_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommEventLog::set_has_log_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommEventLog::clear_has_log_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommEventLog::clear_log_id() {
  if (log_id_ != &::google::protobuf::internal::kEmptyString) {
    log_id_->clear();
  }
  clear_has_log_id();
}
inline const ::std::string& CommEventLog::log_id() const {
  return *log_id_;
}
inline void CommEventLog::set_log_id(const ::std::string& value) {
  set_has_log_id();
  if (log_id_ == &::google::protobuf::internal::kEmptyString) {
    log_id_ = new ::std::string;
  }
  log_id_->assign(value);
}
inline void CommEventLog::set_log_id(const char* value) {
  set_has_log_id();
  if (log_id_ == &::google::protobuf::internal::kEmptyString) {
    log_id_ = new ::std::string;
  }
  log_id_->assign(value);
}
inline void CommEventLog::set_log_id(const char* value, size_t size) {
  set_has_log_id();
  if (log_id_ == &::google::protobuf::internal::kEmptyString) {
    log_id_ = new ::std::string;
  }
  log_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommEventLog::mutable_log_id() {
  set_has_log_id();
  if (log_id_ == &::google::protobuf::internal::kEmptyString) {
    log_id_ = new ::std::string;
  }
  return log_id_;
}
inline ::std::string* CommEventLog::release_log_id() {
  clear_has_log_id();
  if (log_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = log_id_;
    log_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 event_state = 2;
inline bool CommEventLog::has_event_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommEventLog::set_has_event_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommEventLog::clear_has_event_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommEventLog::clear_event_state() {
  event_state_ = 0;
  clear_has_event_state();
}
inline ::google::protobuf::int32 CommEventLog::event_state() const {
  return event_state_;
}
inline void CommEventLog::set_event_state(::google::protobuf::int32 value) {
  set_has_event_state();
  event_state_ = value;
}

// optional int32 event_level = 3;
inline bool CommEventLog::has_event_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommEventLog::set_has_event_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommEventLog::clear_has_event_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommEventLog::clear_event_level() {
  event_level_ = 0;
  clear_has_event_level();
}
inline ::google::protobuf::int32 CommEventLog::event_level() const {
  return event_level_;
}
inline void CommEventLog::set_event_level(::google::protobuf::int32 value) {
  set_has_event_level();
  event_level_ = value;
}

// optional string unit_idx = 4;
inline bool CommEventLog::has_unit_idx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommEventLog::set_has_unit_idx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CommEventLog::clear_has_unit_idx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CommEventLog::clear_unit_idx() {
  if (unit_idx_ != &::google::protobuf::internal::kEmptyString) {
    unit_idx_->clear();
  }
  clear_has_unit_idx();
}
inline const ::std::string& CommEventLog::unit_idx() const {
  return *unit_idx_;
}
inline void CommEventLog::set_unit_idx(const ::std::string& value) {
  set_has_unit_idx();
  if (unit_idx_ == &::google::protobuf::internal::kEmptyString) {
    unit_idx_ = new ::std::string;
  }
  unit_idx_->assign(value);
}
inline void CommEventLog::set_unit_idx(const char* value) {
  set_has_unit_idx();
  if (unit_idx_ == &::google::protobuf::internal::kEmptyString) {
    unit_idx_ = new ::std::string;
  }
  unit_idx_->assign(value);
}
inline void CommEventLog::set_unit_idx(const char* value, size_t size) {
  set_has_unit_idx();
  if (unit_idx_ == &::google::protobuf::internal::kEmptyString) {
    unit_idx_ = new ::std::string;
  }
  unit_idx_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommEventLog::mutable_unit_idx() {
  set_has_unit_idx();
  if (unit_idx_ == &::google::protobuf::internal::kEmptyString) {
    unit_idx_ = new ::std::string;
  }
  return unit_idx_;
}
inline ::std::string* CommEventLog::release_unit_idx() {
  clear_has_unit_idx();
  if (unit_idx_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unit_idx_;
    unit_idx_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 event_type = 5;
inline bool CommEventLog::has_event_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CommEventLog::set_has_event_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CommEventLog::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CommEventLog::clear_event_type() {
  event_type_ = 0;
  clear_has_event_type();
}
inline ::google::protobuf::int32 CommEventLog::event_type() const {
  return event_type_;
}
inline void CommEventLog::set_event_type(::google::protobuf::int32 value) {
  set_has_event_type();
  event_type_ = value;
}

// optional string event_type_name = 6;
inline bool CommEventLog::has_event_type_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CommEventLog::set_has_event_type_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CommEventLog::clear_has_event_type_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CommEventLog::clear_event_type_name() {
  if (event_type_name_ != &::google::protobuf::internal::kEmptyString) {
    event_type_name_->clear();
  }
  clear_has_event_type_name();
}
inline const ::std::string& CommEventLog::event_type_name() const {
  return *event_type_name_;
}
inline void CommEventLog::set_event_type_name(const ::std::string& value) {
  set_has_event_type_name();
  if (event_type_name_ == &::google::protobuf::internal::kEmptyString) {
    event_type_name_ = new ::std::string;
  }
  event_type_name_->assign(value);
}
inline void CommEventLog::set_event_type_name(const char* value) {
  set_has_event_type_name();
  if (event_type_name_ == &::google::protobuf::internal::kEmptyString) {
    event_type_name_ = new ::std::string;
  }
  event_type_name_->assign(value);
}
inline void CommEventLog::set_event_type_name(const char* value, size_t size) {
  set_has_event_type_name();
  if (event_type_name_ == &::google::protobuf::internal::kEmptyString) {
    event_type_name_ = new ::std::string;
  }
  event_type_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommEventLog::mutable_event_type_name() {
  set_has_event_type_name();
  if (event_type_name_ == &::google::protobuf::internal::kEmptyString) {
    event_type_name_ = new ::std::string;
  }
  return event_type_name_;
}
inline ::std::string* CommEventLog::release_event_type_name() {
  clear_has_event_type_name();
  if (event_type_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = event_type_name_;
    event_type_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 sub_sys_type = 7;
inline bool CommEventLog::has_sub_sys_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CommEventLog::set_has_sub_sys_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CommEventLog::clear_has_sub_sys_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CommEventLog::clear_sub_sys_type() {
  sub_sys_type_ = 0;
  clear_has_sub_sys_type();
}
inline ::google::protobuf::int32 CommEventLog::sub_sys_type() const {
  return sub_sys_type_;
}
inline void CommEventLog::set_sub_sys_type(::google::protobuf::int32 value) {
  set_has_sub_sys_type();
  sub_sys_type_ = value;
}

// optional string event_name = 8;
inline bool CommEventLog::has_event_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CommEventLog::set_has_event_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CommEventLog::clear_has_event_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CommEventLog::clear_event_name() {
  if (event_name_ != &::google::protobuf::internal::kEmptyString) {
    event_name_->clear();
  }
  clear_has_event_name();
}
inline const ::std::string& CommEventLog::event_name() const {
  return *event_name_;
}
inline void CommEventLog::set_event_name(const ::std::string& value) {
  set_has_event_name();
  if (event_name_ == &::google::protobuf::internal::kEmptyString) {
    event_name_ = new ::std::string;
  }
  event_name_->assign(value);
}
inline void CommEventLog::set_event_name(const char* value) {
  set_has_event_name();
  if (event_name_ == &::google::protobuf::internal::kEmptyString) {
    event_name_ = new ::std::string;
  }
  event_name_->assign(value);
}
inline void CommEventLog::set_event_name(const char* value, size_t size) {
  set_has_event_name();
  if (event_name_ == &::google::protobuf::internal::kEmptyString) {
    event_name_ = new ::std::string;
  }
  event_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommEventLog::mutable_event_name() {
  set_has_event_name();
  if (event_name_ == &::google::protobuf::internal::kEmptyString) {
    event_name_ = new ::std::string;
  }
  return event_name_;
}
inline ::std::string* CommEventLog::release_event_name() {
  clear_has_event_name();
  if (event_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = event_name_;
    event_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string start_time = 9;
inline bool CommEventLog::has_start_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CommEventLog::set_has_start_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CommEventLog::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CommEventLog::clear_start_time() {
  if (start_time_ != &::google::protobuf::internal::kEmptyString) {
    start_time_->clear();
  }
  clear_has_start_time();
}
inline const ::std::string& CommEventLog::start_time() const {
  return *start_time_;
}
inline void CommEventLog::set_start_time(const ::std::string& value) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::kEmptyString) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(value);
}
inline void CommEventLog::set_start_time(const char* value) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::kEmptyString) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(value);
}
inline void CommEventLog::set_start_time(const char* value, size_t size) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::kEmptyString) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommEventLog::mutable_start_time() {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::kEmptyString) {
    start_time_ = new ::std::string;
  }
  return start_time_;
}
inline ::std::string* CommEventLog::release_start_time() {
  clear_has_start_time();
  if (start_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = start_time_;
    start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string stop_time = 10;
inline bool CommEventLog::has_stop_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CommEventLog::set_has_stop_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CommEventLog::clear_has_stop_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CommEventLog::clear_stop_time() {
  if (stop_time_ != &::google::protobuf::internal::kEmptyString) {
    stop_time_->clear();
  }
  clear_has_stop_time();
}
inline const ::std::string& CommEventLog::stop_time() const {
  return *stop_time_;
}
inline void CommEventLog::set_stop_time(const ::std::string& value) {
  set_has_stop_time();
  if (stop_time_ == &::google::protobuf::internal::kEmptyString) {
    stop_time_ = new ::std::string;
  }
  stop_time_->assign(value);
}
inline void CommEventLog::set_stop_time(const char* value) {
  set_has_stop_time();
  if (stop_time_ == &::google::protobuf::internal::kEmptyString) {
    stop_time_ = new ::std::string;
  }
  stop_time_->assign(value);
}
inline void CommEventLog::set_stop_time(const char* value, size_t size) {
  set_has_stop_time();
  if (stop_time_ == &::google::protobuf::internal::kEmptyString) {
    stop_time_ = new ::std::string;
  }
  stop_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommEventLog::mutable_stop_time() {
  set_has_stop_time();
  if (stop_time_ == &::google::protobuf::internal::kEmptyString) {
    stop_time_ = new ::std::string;
  }
  return stop_time_;
}
inline ::std::string* CommEventLog::release_stop_time() {
  clear_has_stop_time();
  if (stop_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stop_time_;
    stop_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string source_idx = 11;
inline bool CommEventLog::has_source_idx() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CommEventLog::set_has_source_idx() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CommEventLog::clear_has_source_idx() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CommEventLog::clear_source_idx() {
  if (source_idx_ != &::google::protobuf::internal::kEmptyString) {
    source_idx_->clear();
  }
  clear_has_source_idx();
}
inline const ::std::string& CommEventLog::source_idx() const {
  return *source_idx_;
}
inline void CommEventLog::set_source_idx(const ::std::string& value) {
  set_has_source_idx();
  if (source_idx_ == &::google::protobuf::internal::kEmptyString) {
    source_idx_ = new ::std::string;
  }
  source_idx_->assign(value);
}
inline void CommEventLog::set_source_idx(const char* value) {
  set_has_source_idx();
  if (source_idx_ == &::google::protobuf::internal::kEmptyString) {
    source_idx_ = new ::std::string;
  }
  source_idx_->assign(value);
}
inline void CommEventLog::set_source_idx(const char* value, size_t size) {
  set_has_source_idx();
  if (source_idx_ == &::google::protobuf::internal::kEmptyString) {
    source_idx_ = new ::std::string;
  }
  source_idx_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommEventLog::mutable_source_idx() {
  set_has_source_idx();
  if (source_idx_ == &::google::protobuf::internal::kEmptyString) {
    source_idx_ = new ::std::string;
  }
  return source_idx_;
}
inline ::std::string* CommEventLog::release_source_idx() {
  clear_has_source_idx();
  if (source_idx_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = source_idx_;
    source_idx_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 source_type = 12;
inline bool CommEventLog::has_source_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CommEventLog::set_has_source_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CommEventLog::clear_has_source_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CommEventLog::clear_source_type() {
  source_type_ = 0;
  clear_has_source_type();
}
inline ::google::protobuf::int32 CommEventLog::source_type() const {
  return source_type_;
}
inline void CommEventLog::set_source_type(::google::protobuf::int32 value) {
  set_has_source_type();
  source_type_ = value;
}

// optional string source_name = 13;
inline bool CommEventLog::has_source_name() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CommEventLog::set_has_source_name() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CommEventLog::clear_has_source_name() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CommEventLog::clear_source_name() {
  if (source_name_ != &::google::protobuf::internal::kEmptyString) {
    source_name_->clear();
  }
  clear_has_source_name();
}
inline const ::std::string& CommEventLog::source_name() const {
  return *source_name_;
}
inline void CommEventLog::set_source_name(const ::std::string& value) {
  set_has_source_name();
  if (source_name_ == &::google::protobuf::internal::kEmptyString) {
    source_name_ = new ::std::string;
  }
  source_name_->assign(value);
}
inline void CommEventLog::set_source_name(const char* value) {
  set_has_source_name();
  if (source_name_ == &::google::protobuf::internal::kEmptyString) {
    source_name_ = new ::std::string;
  }
  source_name_->assign(value);
}
inline void CommEventLog::set_source_name(const char* value, size_t size) {
  set_has_source_name();
  if (source_name_ == &::google::protobuf::internal::kEmptyString) {
    source_name_ = new ::std::string;
  }
  source_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommEventLog::mutable_source_name() {
  set_has_source_name();
  if (source_name_ == &::google::protobuf::internal::kEmptyString) {
    source_name_ = new ::std::string;
  }
  return source_name_;
}
inline ::std::string* CommEventLog::release_source_name() {
  clear_has_source_name();
  if (source_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = source_name_;
    source_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string log_txt = 14;
inline bool CommEventLog::has_log_txt() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CommEventLog::set_has_log_txt() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CommEventLog::clear_has_log_txt() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CommEventLog::clear_log_txt() {
  if (log_txt_ != &::google::protobuf::internal::kEmptyString) {
    log_txt_->clear();
  }
  clear_has_log_txt();
}
inline const ::std::string& CommEventLog::log_txt() const {
  return *log_txt_;
}
inline void CommEventLog::set_log_txt(const ::std::string& value) {
  set_has_log_txt();
  if (log_txt_ == &::google::protobuf::internal::kEmptyString) {
    log_txt_ = new ::std::string;
  }
  log_txt_->assign(value);
}
inline void CommEventLog::set_log_txt(const char* value) {
  set_has_log_txt();
  if (log_txt_ == &::google::protobuf::internal::kEmptyString) {
    log_txt_ = new ::std::string;
  }
  log_txt_->assign(value);
}
inline void CommEventLog::set_log_txt(const char* value, size_t size) {
  set_has_log_txt();
  if (log_txt_ == &::google::protobuf::internal::kEmptyString) {
    log_txt_ = new ::std::string;
  }
  log_txt_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommEventLog::mutable_log_txt() {
  set_has_log_txt();
  if (log_txt_ == &::google::protobuf::internal::kEmptyString) {
    log_txt_ = new ::std::string;
  }
  return log_txt_;
}
inline ::std::string* CommEventLog::release_log_txt() {
  clear_has_log_txt();
  if (log_txt_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = log_txt_;
    log_txt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string region_idx = 15;
inline bool CommEventLog::has_region_idx() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CommEventLog::set_has_region_idx() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CommEventLog::clear_has_region_idx() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CommEventLog::clear_region_idx() {
  if (region_idx_ != &::google::protobuf::internal::kEmptyString) {
    region_idx_->clear();
  }
  clear_has_region_idx();
}
inline const ::std::string& CommEventLog::region_idx() const {
  return *region_idx_;
}
inline void CommEventLog::set_region_idx(const ::std::string& value) {
  set_has_region_idx();
  if (region_idx_ == &::google::protobuf::internal::kEmptyString) {
    region_idx_ = new ::std::string;
  }
  region_idx_->assign(value);
}
inline void CommEventLog::set_region_idx(const char* value) {
  set_has_region_idx();
  if (region_idx_ == &::google::protobuf::internal::kEmptyString) {
    region_idx_ = new ::std::string;
  }
  region_idx_->assign(value);
}
inline void CommEventLog::set_region_idx(const char* value, size_t size) {
  set_has_region_idx();
  if (region_idx_ == &::google::protobuf::internal::kEmptyString) {
    region_idx_ = new ::std::string;
  }
  region_idx_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommEventLog::mutable_region_idx() {
  set_has_region_idx();
  if (region_idx_ == &::google::protobuf::internal::kEmptyString) {
    region_idx_ = new ::std::string;
  }
  return region_idx_;
}
inline ::std::string* CommEventLog::release_region_idx() {
  clear_has_region_idx();
  if (region_idx_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = region_idx_;
    region_idx_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes ext_info = 20;
inline bool CommEventLog::has_ext_info() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CommEventLog::set_has_ext_info() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CommEventLog::clear_has_ext_info() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CommEventLog::clear_ext_info() {
  if (ext_info_ != &::google::protobuf::internal::kEmptyString) {
    ext_info_->clear();
  }
  clear_has_ext_info();
}
inline const ::std::string& CommEventLog::ext_info() const {
  return *ext_info_;
}
inline void CommEventLog::set_ext_info(const ::std::string& value) {
  set_has_ext_info();
  if (ext_info_ == &::google::protobuf::internal::kEmptyString) {
    ext_info_ = new ::std::string;
  }
  ext_info_->assign(value);
}
inline void CommEventLog::set_ext_info(const char* value) {
  set_has_ext_info();
  if (ext_info_ == &::google::protobuf::internal::kEmptyString) {
    ext_info_ = new ::std::string;
  }
  ext_info_->assign(value);
}
inline void CommEventLog::set_ext_info(const void* value, size_t size) {
  set_has_ext_info();
  if (ext_info_ == &::google::protobuf::internal::kEmptyString) {
    ext_info_ = new ::std::string;
  }
  ext_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommEventLog::mutable_ext_info() {
  set_has_ext_info();
  if (ext_info_ == &::google::protobuf::internal::kEmptyString) {
    ext_info_ = new ::std::string;
  }
  return ext_info_;
}
inline ::std::string* CommEventLog::release_ext_info() {
  clear_has_ext_info();
  if (ext_info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ext_info_;
    ext_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated int32 user_id = 21;
inline int CommEventLog::user_id_size() const {
  return user_id_.size();
}
inline void CommEventLog::clear_user_id() {
  user_id_.Clear();
}
inline ::google::protobuf::int32 CommEventLog::user_id(int index) const {
  return user_id_.Get(index);
}
inline void CommEventLog::set_user_id(int index, ::google::protobuf::int32 value) {
  user_id_.Set(index, value);
}
inline void CommEventLog::add_user_id(::google::protobuf::int32 value) {
  user_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CommEventLog::user_id() const {
  return user_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CommEventLog::mutable_user_id() {
  return &user_id_;
}

// repeated .com.hikvision.cms.api.eps.beds.TriggerResult rslt_msg = 33;
inline int CommEventLog::rslt_msg_size() const {
  return rslt_msg_.size();
}
inline void CommEventLog::clear_rslt_msg() {
  rslt_msg_.Clear();
}
inline const ::com::hikvision::cms::api::eps::beds::TriggerResult& CommEventLog::rslt_msg(int index) const {
  return rslt_msg_.Get(index);
}
inline ::com::hikvision::cms::api::eps::beds::TriggerResult* CommEventLog::mutable_rslt_msg(int index) {
  return rslt_msg_.Mutable(index);
}
inline ::com::hikvision::cms::api::eps::beds::TriggerResult* CommEventLog::add_rslt_msg() {
  return rslt_msg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::hikvision::cms::api::eps::beds::TriggerResult >&
CommEventLog::rslt_msg() const {
  return rslt_msg_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::hikvision::cms::api::eps::beds::TriggerResult >*
CommEventLog::mutable_rslt_msg() {
  return &rslt_msg_;
}

// repeated .com.hikvision.cms.api.eps.beds.CommEventTrig trig_info = 34;
inline int CommEventLog::trig_info_size() const {
  return trig_info_.size();
}
inline void CommEventLog::clear_trig_info() {
  trig_info_.Clear();
}
inline const ::com::hikvision::cms::api::eps::beds::CommEventTrig& CommEventLog::trig_info(int index) const {
  return trig_info_.Get(index);
}
inline ::com::hikvision::cms::api::eps::beds::CommEventTrig* CommEventLog::mutable_trig_info(int index) {
  return trig_info_.Mutable(index);
}
inline ::com::hikvision::cms::api::eps::beds::CommEventTrig* CommEventLog::add_trig_info() {
  return trig_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::hikvision::cms::api::eps::beds::CommEventTrig >&
CommEventLog::trig_info() const {
  return trig_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::hikvision::cms::api::eps::beds::CommEventTrig >*
CommEventLog::mutable_trig_info() {
  return &trig_info_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace beds
}  // namespace eps
}  // namespace api
}  // namespace cms
}  // namespace hikvision
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_event_5fdis_2eproto__INCLUDED
