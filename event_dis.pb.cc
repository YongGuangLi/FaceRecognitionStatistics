// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "event_dis.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace hikvision {
namespace cms {
namespace api {
namespace eps {
namespace beds {

namespace {

const ::google::protobuf::Descriptor* CommEventLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommEventLog_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_event_5fdis_2eproto() {
  protobuf_AddDesc_event_5fdis_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "event_dis.proto");
  GOOGLE_CHECK(file != NULL);
  CommEventLog_descriptor_ = file->message_type(0);
  static const int CommEventLog_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommEventLog, log_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommEventLog, event_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommEventLog, event_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommEventLog, unit_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommEventLog, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommEventLog, event_type_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommEventLog, sub_sys_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommEventLog, event_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommEventLog, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommEventLog, stop_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommEventLog, source_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommEventLog, source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommEventLog, source_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommEventLog, log_txt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommEventLog, region_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommEventLog, ext_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommEventLog, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommEventLog, rslt_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommEventLog, trig_info_),
  };
  CommEventLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommEventLog_descriptor_,
      CommEventLog::default_instance_,
      CommEventLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommEventLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommEventLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommEventLog));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_event_5fdis_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommEventLog_descriptor_, &CommEventLog::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_event_5fdis_2eproto() {
  delete CommEventLog::default_instance_;
  delete CommEventLog_reflection_;
}

void protobuf_AddDesc_event_5fdis_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::com::hikvision::cms::api::eps::beds::protobuf_AddDesc_comm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017event_dis.proto\022\036com.hikvision.cms.api"
    ".eps.beds\032\ncomm.proto\"\341\003\n\014CommEventLog\022\016"
    "\n\006log_id\030\001 \002(\t\022\023\n\013event_state\030\002 \002(\005\022\023\n\013e"
    "vent_level\030\003 \001(\005\022\020\n\010unit_idx\030\004 \001(\t\022\022\n\nev"
    "ent_type\030\005 \001(\005\022\027\n\017event_type_name\030\006 \001(\t\022"
    "\024\n\014sub_sys_type\030\007 \001(\005\022\022\n\nevent_name\030\010 \001("
    "\t\022\022\n\nstart_time\030\t \001(\t\022\021\n\tstop_time\030\n \001(\t"
    "\022\022\n\nsource_idx\030\013 \001(\t\022\023\n\013source_type\030\014 \001("
    "\005\022\023\n\013source_name\030\r \001(\t\022\017\n\007log_txt\030\016 \001(\t\022"
    "\022\n\nregion_idx\030\017 \001(\t\022\020\n\010ext_info\030\024 \001(\014\022\017\n"
    "\007user_id\030\025 \003(\005\022\?\n\010rslt_msg\030! \003(\0132-.com.h"
    "ikvision.cms.api.eps.beds.TriggerResult\022"
    "@\n\ttrig_info\030\" \003(\0132-.com.hikvision.cms.a"
    "pi.eps.beds.CommEventTrig", 545);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "event_dis.proto", &protobuf_RegisterTypes);
  CommEventLog::default_instance_ = new CommEventLog();
  CommEventLog::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_event_5fdis_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_event_5fdis_2eproto {
  StaticDescriptorInitializer_event_5fdis_2eproto() {
    protobuf_AddDesc_event_5fdis_2eproto();
  }
} static_descriptor_initializer_event_5fdis_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int CommEventLog::kLogIdFieldNumber;
const int CommEventLog::kEventStateFieldNumber;
const int CommEventLog::kEventLevelFieldNumber;
const int CommEventLog::kUnitIdxFieldNumber;
const int CommEventLog::kEventTypeFieldNumber;
const int CommEventLog::kEventTypeNameFieldNumber;
const int CommEventLog::kSubSysTypeFieldNumber;
const int CommEventLog::kEventNameFieldNumber;
const int CommEventLog::kStartTimeFieldNumber;
const int CommEventLog::kStopTimeFieldNumber;
const int CommEventLog::kSourceIdxFieldNumber;
const int CommEventLog::kSourceTypeFieldNumber;
const int CommEventLog::kSourceNameFieldNumber;
const int CommEventLog::kLogTxtFieldNumber;
const int CommEventLog::kRegionIdxFieldNumber;
const int CommEventLog::kExtInfoFieldNumber;
const int CommEventLog::kUserIdFieldNumber;
const int CommEventLog::kRsltMsgFieldNumber;
const int CommEventLog::kTrigInfoFieldNumber;
#endif  // !_MSC_VER

CommEventLog::CommEventLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommEventLog::InitAsDefaultInstance() {
}

CommEventLog::CommEventLog(const CommEventLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommEventLog::SharedCtor() {
  _cached_size_ = 0;
  log_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  event_state_ = 0;
  event_level_ = 0;
  unit_idx_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  event_type_ = 0;
  event_type_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sub_sys_type_ = 0;
  event_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stop_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  source_idx_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  source_type_ = 0;
  source_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  log_txt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  region_idx_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ext_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommEventLog::~CommEventLog() {
  SharedDtor();
}

void CommEventLog::SharedDtor() {
  if (log_id_ != &::google::protobuf::internal::kEmptyString) {
    delete log_id_;
  }
  if (unit_idx_ != &::google::protobuf::internal::kEmptyString) {
    delete unit_idx_;
  }
  if (event_type_name_ != &::google::protobuf::internal::kEmptyString) {
    delete event_type_name_;
  }
  if (event_name_ != &::google::protobuf::internal::kEmptyString) {
    delete event_name_;
  }
  if (start_time_ != &::google::protobuf::internal::kEmptyString) {
    delete start_time_;
  }
  if (stop_time_ != &::google::protobuf::internal::kEmptyString) {
    delete stop_time_;
  }
  if (source_idx_ != &::google::protobuf::internal::kEmptyString) {
    delete source_idx_;
  }
  if (source_name_ != &::google::protobuf::internal::kEmptyString) {
    delete source_name_;
  }
  if (log_txt_ != &::google::protobuf::internal::kEmptyString) {
    delete log_txt_;
  }
  if (region_idx_ != &::google::protobuf::internal::kEmptyString) {
    delete region_idx_;
  }
  if (ext_info_ != &::google::protobuf::internal::kEmptyString) {
    delete ext_info_;
  }
  if (this != default_instance_) {
  }
}

void CommEventLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommEventLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommEventLog_descriptor_;
}

const CommEventLog& CommEventLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_5fdis_2eproto();  return *default_instance_;
}

CommEventLog* CommEventLog::default_instance_ = NULL;

CommEventLog* CommEventLog::New() const {
  return new CommEventLog;
}

void CommEventLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_log_id()) {
      if (log_id_ != &::google::protobuf::internal::kEmptyString) {
        log_id_->clear();
      }
    }
    event_state_ = 0;
    event_level_ = 0;
    if (has_unit_idx()) {
      if (unit_idx_ != &::google::protobuf::internal::kEmptyString) {
        unit_idx_->clear();
      }
    }
    event_type_ = 0;
    if (has_event_type_name()) {
      if (event_type_name_ != &::google::protobuf::internal::kEmptyString) {
        event_type_name_->clear();
      }
    }
    sub_sys_type_ = 0;
    if (has_event_name()) {
      if (event_name_ != &::google::protobuf::internal::kEmptyString) {
        event_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_start_time()) {
      if (start_time_ != &::google::protobuf::internal::kEmptyString) {
        start_time_->clear();
      }
    }
    if (has_stop_time()) {
      if (stop_time_ != &::google::protobuf::internal::kEmptyString) {
        stop_time_->clear();
      }
    }
    if (has_source_idx()) {
      if (source_idx_ != &::google::protobuf::internal::kEmptyString) {
        source_idx_->clear();
      }
    }
    source_type_ = 0;
    if (has_source_name()) {
      if (source_name_ != &::google::protobuf::internal::kEmptyString) {
        source_name_->clear();
      }
    }
    if (has_log_txt()) {
      if (log_txt_ != &::google::protobuf::internal::kEmptyString) {
        log_txt_->clear();
      }
    }
    if (has_region_idx()) {
      if (region_idx_ != &::google::protobuf::internal::kEmptyString) {
        region_idx_->clear();
      }
    }
    if (has_ext_info()) {
      if (ext_info_ != &::google::protobuf::internal::kEmptyString) {
        ext_info_->clear();
      }
    }
  }
  user_id_.Clear();
  rslt_msg_.Clear();
  trig_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommEventLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string log_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->log_id().data(), this->log_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_event_state;
        break;
      }
      
      // required int32 event_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_state_)));
          set_has_event_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_event_level;
        break;
      }
      
      // optional int32 event_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_level_)));
          set_has_event_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_unit_idx;
        break;
      }
      
      // optional string unit_idx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unit_idx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit_idx()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unit_idx().data(), this->unit_idx().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_event_type;
        break;
      }
      
      // optional int32 event_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_type_)));
          set_has_event_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_event_type_name;
        break;
      }
      
      // optional string event_type_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_type_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_type_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->event_type_name().data(), this->event_type_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sub_sys_type;
        break;
      }
      
      // optional int32 sub_sys_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_sys_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_sys_type_)));
          set_has_sub_sys_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_event_name;
        break;
      }
      
      // optional string event_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->event_name().data(), this->event_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_start_time;
        break;
      }
      
      // optional string start_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->start_time().data(), this->start_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_stop_time;
        break;
      }
      
      // optional string stop_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stop_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stop_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stop_time().data(), this->stop_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_source_idx;
        break;
      }
      
      // optional string source_idx = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_source_idx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_idx()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->source_idx().data(), this->source_idx().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_source_type;
        break;
      }
      
      // optional int32 source_type = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_type_)));
          set_has_source_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_source_name;
        break;
      }
      
      // optional string source_name = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_source_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->source_name().data(), this->source_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_log_txt;
        break;
      }
      
      // optional string log_txt = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log_txt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_txt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->log_txt().data(), this->log_txt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_region_idx;
        break;
      }
      
      // optional string region_idx = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_region_idx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_region_idx()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->region_idx().data(), this->region_idx().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_ext_info;
        break;
      }
      
      // optional bytes ext_info = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ext_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ext_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_user_id;
        break;
      }
      
      // repeated int32 user_id = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 168, input, this->mutable_user_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_user_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_user_id;
        if (input->ExpectTag(266)) goto parse_rslt_msg;
        break;
      }
      
      // repeated .com.hikvision.cms.api.eps.beds.TriggerResult rslt_msg = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rslt_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rslt_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_rslt_msg;
        if (input->ExpectTag(274)) goto parse_trig_info;
        break;
      }
      
      // repeated .com.hikvision.cms.api.eps.beds.CommEventTrig trig_info = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trig_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trig_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_trig_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommEventLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string log_id = 1;
  if (has_log_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_id().data(), this->log_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->log_id(), output);
  }
  
  // required int32 event_state = 2;
  if (has_event_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->event_state(), output);
  }
  
  // optional int32 event_level = 3;
  if (has_event_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->event_level(), output);
  }
  
  // optional string unit_idx = 4;
  if (has_unit_idx()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unit_idx().data(), this->unit_idx().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->unit_idx(), output);
  }
  
  // optional int32 event_type = 5;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->event_type(), output);
  }
  
  // optional string event_type_name = 6;
  if (has_event_type_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_type_name().data(), this->event_type_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->event_type_name(), output);
  }
  
  // optional int32 sub_sys_type = 7;
  if (has_sub_sys_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sub_sys_type(), output);
  }
  
  // optional string event_name = 8;
  if (has_event_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_name().data(), this->event_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->event_name(), output);
  }
  
  // optional string start_time = 9;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->start_time().data(), this->start_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->start_time(), output);
  }
  
  // optional string stop_time = 10;
  if (has_stop_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stop_time().data(), this->stop_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->stop_time(), output);
  }
  
  // optional string source_idx = 11;
  if (has_source_idx()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source_idx().data(), this->source_idx().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->source_idx(), output);
  }
  
  // optional int32 source_type = 12;
  if (has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->source_type(), output);
  }
  
  // optional string source_name = 13;
  if (has_source_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source_name().data(), this->source_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->source_name(), output);
  }
  
  // optional string log_txt = 14;
  if (has_log_txt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_txt().data(), this->log_txt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->log_txt(), output);
  }
  
  // optional string region_idx = 15;
  if (has_region_idx()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->region_idx().data(), this->region_idx().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->region_idx(), output);
  }
  
  // optional bytes ext_info = 20;
  if (has_ext_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->ext_info(), output);
  }
  
  // repeated int32 user_id = 21;
  for (int i = 0; i < this->user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      21, this->user_id(i), output);
  }
  
  // repeated .com.hikvision.cms.api.eps.beds.TriggerResult rslt_msg = 33;
  for (int i = 0; i < this->rslt_msg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->rslt_msg(i), output);
  }
  
  // repeated .com.hikvision.cms.api.eps.beds.CommEventTrig trig_info = 34;
  for (int i = 0; i < this->trig_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->trig_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommEventLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string log_id = 1;
  if (has_log_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_id().data(), this->log_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->log_id(), target);
  }
  
  // required int32 event_state = 2;
  if (has_event_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->event_state(), target);
  }
  
  // optional int32 event_level = 3;
  if (has_event_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->event_level(), target);
  }
  
  // optional string unit_idx = 4;
  if (has_unit_idx()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unit_idx().data(), this->unit_idx().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->unit_idx(), target);
  }
  
  // optional int32 event_type = 5;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->event_type(), target);
  }
  
  // optional string event_type_name = 6;
  if (has_event_type_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_type_name().data(), this->event_type_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->event_type_name(), target);
  }
  
  // optional int32 sub_sys_type = 7;
  if (has_sub_sys_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sub_sys_type(), target);
  }
  
  // optional string event_name = 8;
  if (has_event_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_name().data(), this->event_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->event_name(), target);
  }
  
  // optional string start_time = 9;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->start_time().data(), this->start_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->start_time(), target);
  }
  
  // optional string stop_time = 10;
  if (has_stop_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stop_time().data(), this->stop_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->stop_time(), target);
  }
  
  // optional string source_idx = 11;
  if (has_source_idx()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source_idx().data(), this->source_idx().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->source_idx(), target);
  }
  
  // optional int32 source_type = 12;
  if (has_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->source_type(), target);
  }
  
  // optional string source_name = 13;
  if (has_source_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source_name().data(), this->source_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->source_name(), target);
  }
  
  // optional string log_txt = 14;
  if (has_log_txt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_txt().data(), this->log_txt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->log_txt(), target);
  }
  
  // optional string region_idx = 15;
  if (has_region_idx()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->region_idx().data(), this->region_idx().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->region_idx(), target);
  }
  
  // optional bytes ext_info = 20;
  if (has_ext_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->ext_info(), target);
  }
  
  // repeated int32 user_id = 21;
  for (int i = 0; i < this->user_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(21, this->user_id(i), target);
  }
  
  // repeated .com.hikvision.cms.api.eps.beds.TriggerResult rslt_msg = 33;
  for (int i = 0; i < this->rslt_msg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->rslt_msg(i), target);
  }
  
  // repeated .com.hikvision.cms.api.eps.beds.CommEventTrig trig_info = 34;
  for (int i = 0; i < this->trig_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->trig_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommEventLog::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string log_id = 1;
    if (has_log_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log_id());
    }
    
    // required int32 event_state = 2;
    if (has_event_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_state());
    }
    
    // optional int32 event_level = 3;
    if (has_event_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_level());
    }
    
    // optional string unit_idx = 4;
    if (has_unit_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unit_idx());
    }
    
    // optional int32 event_type = 5;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_type());
    }
    
    // optional string event_type_name = 6;
    if (has_event_type_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_type_name());
    }
    
    // optional int32 sub_sys_type = 7;
    if (has_sub_sys_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_sys_type());
    }
    
    // optional string event_name = 8;
    if (has_event_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_name());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string start_time = 9;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_time());
    }
    
    // optional string stop_time = 10;
    if (has_stop_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stop_time());
    }
    
    // optional string source_idx = 11;
    if (has_source_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source_idx());
    }
    
    // optional int32 source_type = 12;
    if (has_source_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->source_type());
    }
    
    // optional string source_name = 13;
    if (has_source_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source_name());
    }
    
    // optional string log_txt = 14;
    if (has_log_txt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log_txt());
    }
    
    // optional string region_idx = 15;
    if (has_region_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->region_idx());
    }
    
    // optional bytes ext_info = 20;
    if (has_ext_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ext_info());
    }
    
  }
  // repeated int32 user_id = 21;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->user_id(i));
    }
    total_size += 2 * this->user_id_size() + data_size;
  }
  
  // repeated .com.hikvision.cms.api.eps.beds.TriggerResult rslt_msg = 33;
  total_size += 2 * this->rslt_msg_size();
  for (int i = 0; i < this->rslt_msg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rslt_msg(i));
  }
  
  // repeated .com.hikvision.cms.api.eps.beds.CommEventTrig trig_info = 34;
  total_size += 2 * this->trig_info_size();
  for (int i = 0; i < this->trig_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trig_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommEventLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommEventLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommEventLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommEventLog::MergeFrom(const CommEventLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_id_.MergeFrom(from.user_id_);
  rslt_msg_.MergeFrom(from.rslt_msg_);
  trig_info_.MergeFrom(from.trig_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_log_id()) {
      set_log_id(from.log_id());
    }
    if (from.has_event_state()) {
      set_event_state(from.event_state());
    }
    if (from.has_event_level()) {
      set_event_level(from.event_level());
    }
    if (from.has_unit_idx()) {
      set_unit_idx(from.unit_idx());
    }
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_event_type_name()) {
      set_event_type_name(from.event_type_name());
    }
    if (from.has_sub_sys_type()) {
      set_sub_sys_type(from.sub_sys_type());
    }
    if (from.has_event_name()) {
      set_event_name(from.event_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_stop_time()) {
      set_stop_time(from.stop_time());
    }
    if (from.has_source_idx()) {
      set_source_idx(from.source_idx());
    }
    if (from.has_source_type()) {
      set_source_type(from.source_type());
    }
    if (from.has_source_name()) {
      set_source_name(from.source_name());
    }
    if (from.has_log_txt()) {
      set_log_txt(from.log_txt());
    }
    if (from.has_region_idx()) {
      set_region_idx(from.region_idx());
    }
    if (from.has_ext_info()) {
      set_ext_info(from.ext_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommEventLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommEventLog::CopyFrom(const CommEventLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommEventLog::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < rslt_msg_size(); i++) {
    if (!this->rslt_msg(i).IsInitialized()) return false;
  }
  for (int i = 0; i < trig_info_size(); i++) {
    if (!this->trig_info(i).IsInitialized()) return false;
  }
  return true;
}

void CommEventLog::Swap(CommEventLog* other) {
  if (other != this) {
    std::swap(log_id_, other->log_id_);
    std::swap(event_state_, other->event_state_);
    std::swap(event_level_, other->event_level_);
    std::swap(unit_idx_, other->unit_idx_);
    std::swap(event_type_, other->event_type_);
    std::swap(event_type_name_, other->event_type_name_);
    std::swap(sub_sys_type_, other->sub_sys_type_);
    std::swap(event_name_, other->event_name_);
    std::swap(start_time_, other->start_time_);
    std::swap(stop_time_, other->stop_time_);
    std::swap(source_idx_, other->source_idx_);
    std::swap(source_type_, other->source_type_);
    std::swap(source_name_, other->source_name_);
    std::swap(log_txt_, other->log_txt_);
    std::swap(region_idx_, other->region_idx_);
    std::swap(ext_info_, other->ext_info_);
    user_id_.Swap(&other->user_id_);
    rslt_msg_.Swap(&other->rslt_msg_);
    trig_info_.Swap(&other->trig_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommEventLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommEventLog_descriptor_;
  metadata.reflection = CommEventLog_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace beds
}  // namespace eps
}  // namespace api
}  // namespace cms
}  // namespace hikvision
}  // namespace com

// @@protoc_insertion_point(global_scope)
