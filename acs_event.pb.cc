// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "acs_event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace hikvision {
namespace cms {
namespace api {
namespace eps {
namespace beds {

namespace {

const ::google::protobuf::Descriptor* AccessEventLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccessEventLog_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_acs_5fevent_2eproto() {
  protobuf_AddDesc_acs_5fevent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "acs_event.proto");
  GOOGLE_CHECK(file != NULL);
  AccessEventLog_descriptor_ = file->message_type(0);
  static const int AccessEventLog_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessEventLog, event_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessEventLog, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessEventLog, device_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessEventLog, device_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessEventLog, event_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessEventLog, person_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessEventLog, person_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessEventLog, dept_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessEventLog, dept_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessEventLog, dept_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessEventLog, devicel1_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessEventLog, devicel1_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessEventLog, devicel1_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessEventLog, devicel2_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessEventLog, devicel2_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessEventLog, devicel2_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessEventLog, devicel3_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessEventLog, devicel3_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessEventLog, devicel3_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessEventLog, in_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessEventLog, ext_txt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessEventLog, door_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessEventLog, card_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessEventLog, pic_url_),
  };
  AccessEventLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccessEventLog_descriptor_,
      AccessEventLog::default_instance_,
      AccessEventLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessEventLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessEventLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccessEventLog));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_acs_5fevent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccessEventLog_descriptor_, &AccessEventLog::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_acs_5fevent_2eproto() {
  delete AccessEventLog::default_instance_;
  delete AccessEventLog_reflection_;
}

void protobuf_AddDesc_acs_5fevent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::com::hikvision::cms::api::eps::beds::protobuf_AddDesc_comm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017acs_event.proto\022\036com.hikvision.cms.api"
    ".eps.beds\032\ncomm.proto\"\365\003\n\016AccessEventLog"
    "\022\022\n\nevent_code\030\001 \001(\005\022\021\n\tdevice_id\030\002 \001(\005\022"
    "\023\n\013device_type\030\003 \001(\005\022\023\n\013device_name\030\004 \001("
    "\t\022\022\n\nevent_card\030\005 \001(\t\022\021\n\tperson_id\030\006 \001(\005"
    "\022\023\n\013person_name\030\007 \001(\t\022\017\n\007dept_id\030\010 \001(\005\022\021"
    "\n\tdept_name\030\t \001(\t\022\021\n\tdept_code\030\n \001(\t\022\023\n\013"
    "deviceL1_id\030\013 \001(\005\022\025\n\rdeviceL1_type\030\014 \001(\005"
    "\022\025\n\rdeviceL1_name\030\r \001(\t\022\023\n\013deviceL2_id\030\016"
    " \001(\005\022\025\n\rdeviceL2_type\030\017 \001(\005\022\025\n\rdeviceL2_"
    "name\030\020 \001(\t\022\023\n\013deviceL3_id\030\021 \001(\005\022\025\n\rdevic"
    "eL3_type\030\022 \001(\005\022\025\n\rdeviceL3_name\030\023 \001(\t\022\016\n"
    "\006in_out\030\024 \001(\005\022\017\n\007ext_txt\030\025 \001(\t\022\017\n\007door_i"
    "d\030! \001(\005\022\023\n\013card_status\030\" \001(\005\022\017\n\007pic_url\030"
    "# \001(\t", 565);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "acs_event.proto", &protobuf_RegisterTypes);
  AccessEventLog::default_instance_ = new AccessEventLog();
  AccessEventLog::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_acs_5fevent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_acs_5fevent_2eproto {
  StaticDescriptorInitializer_acs_5fevent_2eproto() {
    protobuf_AddDesc_acs_5fevent_2eproto();
  }
} static_descriptor_initializer_acs_5fevent_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int AccessEventLog::kEventCodeFieldNumber;
const int AccessEventLog::kDeviceIdFieldNumber;
const int AccessEventLog::kDeviceTypeFieldNumber;
const int AccessEventLog::kDeviceNameFieldNumber;
const int AccessEventLog::kEventCardFieldNumber;
const int AccessEventLog::kPersonIdFieldNumber;
const int AccessEventLog::kPersonNameFieldNumber;
const int AccessEventLog::kDeptIdFieldNumber;
const int AccessEventLog::kDeptNameFieldNumber;
const int AccessEventLog::kDeptCodeFieldNumber;
const int AccessEventLog::kDeviceL1IdFieldNumber;
const int AccessEventLog::kDeviceL1TypeFieldNumber;
const int AccessEventLog::kDeviceL1NameFieldNumber;
const int AccessEventLog::kDeviceL2IdFieldNumber;
const int AccessEventLog::kDeviceL2TypeFieldNumber;
const int AccessEventLog::kDeviceL2NameFieldNumber;
const int AccessEventLog::kDeviceL3IdFieldNumber;
const int AccessEventLog::kDeviceL3TypeFieldNumber;
const int AccessEventLog::kDeviceL3NameFieldNumber;
const int AccessEventLog::kInOutFieldNumber;
const int AccessEventLog::kExtTxtFieldNumber;
const int AccessEventLog::kDoorIdFieldNumber;
const int AccessEventLog::kCardStatusFieldNumber;
const int AccessEventLog::kPicUrlFieldNumber;
#endif  // !_MSC_VER

AccessEventLog::AccessEventLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccessEventLog::InitAsDefaultInstance() {
}

AccessEventLog::AccessEventLog(const AccessEventLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccessEventLog::SharedCtor() {
  _cached_size_ = 0;
  event_code_ = 0;
  device_id_ = 0;
  device_type_ = 0;
  device_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  event_card_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  person_id_ = 0;
  person_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dept_id_ = 0;
  dept_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dept_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  devicel1_id_ = 0;
  devicel1_type_ = 0;
  devicel1_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  devicel2_id_ = 0;
  devicel2_type_ = 0;
  devicel2_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  devicel3_id_ = 0;
  devicel3_type_ = 0;
  devicel3_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  in_out_ = 0;
  ext_txt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  door_id_ = 0;
  card_status_ = 0;
  pic_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccessEventLog::~AccessEventLog() {
  SharedDtor();
}

void AccessEventLog::SharedDtor() {
  if (device_name_ != &::google::protobuf::internal::kEmptyString) {
    delete device_name_;
  }
  if (event_card_ != &::google::protobuf::internal::kEmptyString) {
    delete event_card_;
  }
  if (person_name_ != &::google::protobuf::internal::kEmptyString) {
    delete person_name_;
  }
  if (dept_name_ != &::google::protobuf::internal::kEmptyString) {
    delete dept_name_;
  }
  if (dept_code_ != &::google::protobuf::internal::kEmptyString) {
    delete dept_code_;
  }
  if (devicel1_name_ != &::google::protobuf::internal::kEmptyString) {
    delete devicel1_name_;
  }
  if (devicel2_name_ != &::google::protobuf::internal::kEmptyString) {
    delete devicel2_name_;
  }
  if (devicel3_name_ != &::google::protobuf::internal::kEmptyString) {
    delete devicel3_name_;
  }
  if (ext_txt_ != &::google::protobuf::internal::kEmptyString) {
    delete ext_txt_;
  }
  if (pic_url_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_url_;
  }
  if (this != default_instance_) {
  }
}

void AccessEventLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccessEventLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccessEventLog_descriptor_;
}

const AccessEventLog& AccessEventLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_acs_5fevent_2eproto();  return *default_instance_;
}

AccessEventLog* AccessEventLog::default_instance_ = NULL;

AccessEventLog* AccessEventLog::New() const {
  return new AccessEventLog;
}

void AccessEventLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_code_ = 0;
    device_id_ = 0;
    device_type_ = 0;
    if (has_device_name()) {
      if (device_name_ != &::google::protobuf::internal::kEmptyString) {
        device_name_->clear();
      }
    }
    if (has_event_card()) {
      if (event_card_ != &::google::protobuf::internal::kEmptyString) {
        event_card_->clear();
      }
    }
    person_id_ = 0;
    if (has_person_name()) {
      if (person_name_ != &::google::protobuf::internal::kEmptyString) {
        person_name_->clear();
      }
    }
    dept_id_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_dept_name()) {
      if (dept_name_ != &::google::protobuf::internal::kEmptyString) {
        dept_name_->clear();
      }
    }
    if (has_dept_code()) {
      if (dept_code_ != &::google::protobuf::internal::kEmptyString) {
        dept_code_->clear();
      }
    }
    devicel1_id_ = 0;
    devicel1_type_ = 0;
    if (has_devicel1_name()) {
      if (devicel1_name_ != &::google::protobuf::internal::kEmptyString) {
        devicel1_name_->clear();
      }
    }
    devicel2_id_ = 0;
    devicel2_type_ = 0;
    if (has_devicel2_name()) {
      if (devicel2_name_ != &::google::protobuf::internal::kEmptyString) {
        devicel2_name_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    devicel3_id_ = 0;
    devicel3_type_ = 0;
    if (has_devicel3_name()) {
      if (devicel3_name_ != &::google::protobuf::internal::kEmptyString) {
        devicel3_name_->clear();
      }
    }
    in_out_ = 0;
    if (has_ext_txt()) {
      if (ext_txt_ != &::google::protobuf::internal::kEmptyString) {
        ext_txt_->clear();
      }
    }
    door_id_ = 0;
    card_status_ = 0;
    if (has_pic_url()) {
      if (pic_url_ != &::google::protobuf::internal::kEmptyString) {
        pic_url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccessEventLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 event_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_code_)));
          set_has_event_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_device_id;
        break;
      }
      
      // optional int32 device_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_device_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_id_)));
          set_has_device_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_device_type;
        break;
      }
      
      // optional int32 device_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_device_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_type_)));
          set_has_device_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_device_name;
        break;
      }
      
      // optional string device_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_name().data(), this->device_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_event_card;
        break;
      }
      
      // optional string event_card = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_card()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->event_card().data(), this->event_card().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_person_id;
        break;
      }
      
      // optional int32 person_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_person_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &person_id_)));
          set_has_person_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_person_name;
        break;
      }
      
      // optional string person_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_person_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_person_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->person_name().data(), this->person_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_dept_id;
        break;
      }
      
      // optional int32 dept_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dept_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dept_id_)));
          set_has_dept_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_dept_name;
        break;
      }
      
      // optional string dept_name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dept_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dept_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dept_name().data(), this->dept_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_dept_code;
        break;
      }
      
      // optional string dept_code = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dept_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dept_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dept_code().data(), this->dept_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_deviceL1_id;
        break;
      }
      
      // optional int32 deviceL1_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deviceL1_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devicel1_id_)));
          set_has_devicel1_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_deviceL1_type;
        break;
      }
      
      // optional int32 deviceL1_type = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deviceL1_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devicel1_type_)));
          set_has_devicel1_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_deviceL1_name;
        break;
      }
      
      // optional string deviceL1_name = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceL1_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicel1_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->devicel1_name().data(), this->devicel1_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_deviceL2_id;
        break;
      }
      
      // optional int32 deviceL2_id = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deviceL2_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devicel2_id_)));
          set_has_devicel2_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_deviceL2_type;
        break;
      }
      
      // optional int32 deviceL2_type = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deviceL2_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devicel2_type_)));
          set_has_devicel2_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_deviceL2_name;
        break;
      }
      
      // optional string deviceL2_name = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceL2_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicel2_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->devicel2_name().data(), this->devicel2_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_deviceL3_id;
        break;
      }
      
      // optional int32 deviceL3_id = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deviceL3_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devicel3_id_)));
          set_has_devicel3_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_deviceL3_type;
        break;
      }
      
      // optional int32 deviceL3_type = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deviceL3_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devicel3_type_)));
          set_has_devicel3_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_deviceL3_name;
        break;
      }
      
      // optional string deviceL3_name = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceL3_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicel3_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->devicel3_name().data(), this->devicel3_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_in_out;
        break;
      }
      
      // optional int32 in_out = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &in_out_)));
          set_has_in_out();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_ext_txt;
        break;
      }
      
      // optional string ext_txt = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ext_txt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ext_txt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ext_txt().data(), this->ext_txt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_door_id;
        break;
      }
      
      // optional int32 door_id = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_door_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &door_id_)));
          set_has_door_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_card_status;
        break;
      }
      
      // optional int32 card_status = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_status_)));
          set_has_card_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_pic_url;
        break;
      }
      
      // optional string pic_url = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pic_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pic_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pic_url().data(), this->pic_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccessEventLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 event_code = 1;
  if (has_event_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_code(), output);
  }
  
  // optional int32 device_id = 2;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->device_id(), output);
  }
  
  // optional int32 device_type = 3;
  if (has_device_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->device_type(), output);
  }
  
  // optional string device_name = 4;
  if (has_device_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->device_name(), output);
  }
  
  // optional string event_card = 5;
  if (has_event_card()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_card().data(), this->event_card().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->event_card(), output);
  }
  
  // optional int32 person_id = 6;
  if (has_person_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->person_id(), output);
  }
  
  // optional string person_name = 7;
  if (has_person_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->person_name().data(), this->person_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->person_name(), output);
  }
  
  // optional int32 dept_id = 8;
  if (has_dept_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->dept_id(), output);
  }
  
  // optional string dept_name = 9;
  if (has_dept_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dept_name().data(), this->dept_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->dept_name(), output);
  }
  
  // optional string dept_code = 10;
  if (has_dept_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dept_code().data(), this->dept_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->dept_code(), output);
  }
  
  // optional int32 deviceL1_id = 11;
  if (has_devicel1_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->devicel1_id(), output);
  }
  
  // optional int32 deviceL1_type = 12;
  if (has_devicel1_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->devicel1_type(), output);
  }
  
  // optional string deviceL1_name = 13;
  if (has_devicel1_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicel1_name().data(), this->devicel1_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->devicel1_name(), output);
  }
  
  // optional int32 deviceL2_id = 14;
  if (has_devicel2_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->devicel2_id(), output);
  }
  
  // optional int32 deviceL2_type = 15;
  if (has_devicel2_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->devicel2_type(), output);
  }
  
  // optional string deviceL2_name = 16;
  if (has_devicel2_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicel2_name().data(), this->devicel2_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->devicel2_name(), output);
  }
  
  // optional int32 deviceL3_id = 17;
  if (has_devicel3_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->devicel3_id(), output);
  }
  
  // optional int32 deviceL3_type = 18;
  if (has_devicel3_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->devicel3_type(), output);
  }
  
  // optional string deviceL3_name = 19;
  if (has_devicel3_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicel3_name().data(), this->devicel3_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->devicel3_name(), output);
  }
  
  // optional int32 in_out = 20;
  if (has_in_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->in_out(), output);
  }
  
  // optional string ext_txt = 21;
  if (has_ext_txt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ext_txt().data(), this->ext_txt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->ext_txt(), output);
  }
  
  // optional int32 door_id = 33;
  if (has_door_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->door_id(), output);
  }
  
  // optional int32 card_status = 34;
  if (has_card_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->card_status(), output);
  }
  
  // optional string pic_url = 35;
  if (has_pic_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic_url().data(), this->pic_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      35, this->pic_url(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccessEventLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 event_code = 1;
  if (has_event_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_code(), target);
  }
  
  // optional int32 device_id = 2;
  if (has_device_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->device_id(), target);
  }
  
  // optional int32 device_type = 3;
  if (has_device_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->device_type(), target);
  }
  
  // optional string device_name = 4;
  if (has_device_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->device_name(), target);
  }
  
  // optional string event_card = 5;
  if (has_event_card()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_card().data(), this->event_card().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->event_card(), target);
  }
  
  // optional int32 person_id = 6;
  if (has_person_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->person_id(), target);
  }
  
  // optional string person_name = 7;
  if (has_person_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->person_name().data(), this->person_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->person_name(), target);
  }
  
  // optional int32 dept_id = 8;
  if (has_dept_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->dept_id(), target);
  }
  
  // optional string dept_name = 9;
  if (has_dept_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dept_name().data(), this->dept_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->dept_name(), target);
  }
  
  // optional string dept_code = 10;
  if (has_dept_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dept_code().data(), this->dept_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->dept_code(), target);
  }
  
  // optional int32 deviceL1_id = 11;
  if (has_devicel1_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->devicel1_id(), target);
  }
  
  // optional int32 deviceL1_type = 12;
  if (has_devicel1_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->devicel1_type(), target);
  }
  
  // optional string deviceL1_name = 13;
  if (has_devicel1_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicel1_name().data(), this->devicel1_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->devicel1_name(), target);
  }
  
  // optional int32 deviceL2_id = 14;
  if (has_devicel2_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->devicel2_id(), target);
  }
  
  // optional int32 deviceL2_type = 15;
  if (has_devicel2_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->devicel2_type(), target);
  }
  
  // optional string deviceL2_name = 16;
  if (has_devicel2_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicel2_name().data(), this->devicel2_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->devicel2_name(), target);
  }
  
  // optional int32 deviceL3_id = 17;
  if (has_devicel3_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->devicel3_id(), target);
  }
  
  // optional int32 deviceL3_type = 18;
  if (has_devicel3_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->devicel3_type(), target);
  }
  
  // optional string deviceL3_name = 19;
  if (has_devicel3_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicel3_name().data(), this->devicel3_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->devicel3_name(), target);
  }
  
  // optional int32 in_out = 20;
  if (has_in_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->in_out(), target);
  }
  
  // optional string ext_txt = 21;
  if (has_ext_txt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ext_txt().data(), this->ext_txt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->ext_txt(), target);
  }
  
  // optional int32 door_id = 33;
  if (has_door_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->door_id(), target);
  }
  
  // optional int32 card_status = 34;
  if (has_card_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->card_status(), target);
  }
  
  // optional string pic_url = 35;
  if (has_pic_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic_url().data(), this->pic_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        35, this->pic_url(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccessEventLog::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 event_code = 1;
    if (has_event_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_code());
    }
    
    // optional int32 device_id = 2;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->device_id());
    }
    
    // optional int32 device_type = 3;
    if (has_device_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->device_type());
    }
    
    // optional string device_name = 4;
    if (has_device_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_name());
    }
    
    // optional string event_card = 5;
    if (has_event_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_card());
    }
    
    // optional int32 person_id = 6;
    if (has_person_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->person_id());
    }
    
    // optional string person_name = 7;
    if (has_person_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->person_name());
    }
    
    // optional int32 dept_id = 8;
    if (has_dept_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dept_id());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string dept_name = 9;
    if (has_dept_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dept_name());
    }
    
    // optional string dept_code = 10;
    if (has_dept_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dept_code());
    }
    
    // optional int32 deviceL1_id = 11;
    if (has_devicel1_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->devicel1_id());
    }
    
    // optional int32 deviceL1_type = 12;
    if (has_devicel1_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->devicel1_type());
    }
    
    // optional string deviceL1_name = 13;
    if (has_devicel1_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicel1_name());
    }
    
    // optional int32 deviceL2_id = 14;
    if (has_devicel2_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->devicel2_id());
    }
    
    // optional int32 deviceL2_type = 15;
    if (has_devicel2_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->devicel2_type());
    }
    
    // optional string deviceL2_name = 16;
    if (has_devicel2_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicel2_name());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 deviceL3_id = 17;
    if (has_devicel3_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->devicel3_id());
    }
    
    // optional int32 deviceL3_type = 18;
    if (has_devicel3_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->devicel3_type());
    }
    
    // optional string deviceL3_name = 19;
    if (has_devicel3_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicel3_name());
    }
    
    // optional int32 in_out = 20;
    if (has_in_out()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->in_out());
    }
    
    // optional string ext_txt = 21;
    if (has_ext_txt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ext_txt());
    }
    
    // optional int32 door_id = 33;
    if (has_door_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->door_id());
    }
    
    // optional int32 card_status = 34;
    if (has_card_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card_status());
    }
    
    // optional string pic_url = 35;
    if (has_pic_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pic_url());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccessEventLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccessEventLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccessEventLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccessEventLog::MergeFrom(const AccessEventLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_code()) {
      set_event_code(from.event_code());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_device_type()) {
      set_device_type(from.device_type());
    }
    if (from.has_device_name()) {
      set_device_name(from.device_name());
    }
    if (from.has_event_card()) {
      set_event_card(from.event_card());
    }
    if (from.has_person_id()) {
      set_person_id(from.person_id());
    }
    if (from.has_person_name()) {
      set_person_name(from.person_name());
    }
    if (from.has_dept_id()) {
      set_dept_id(from.dept_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dept_name()) {
      set_dept_name(from.dept_name());
    }
    if (from.has_dept_code()) {
      set_dept_code(from.dept_code());
    }
    if (from.has_devicel1_id()) {
      set_devicel1_id(from.devicel1_id());
    }
    if (from.has_devicel1_type()) {
      set_devicel1_type(from.devicel1_type());
    }
    if (from.has_devicel1_name()) {
      set_devicel1_name(from.devicel1_name());
    }
    if (from.has_devicel2_id()) {
      set_devicel2_id(from.devicel2_id());
    }
    if (from.has_devicel2_type()) {
      set_devicel2_type(from.devicel2_type());
    }
    if (from.has_devicel2_name()) {
      set_devicel2_name(from.devicel2_name());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_devicel3_id()) {
      set_devicel3_id(from.devicel3_id());
    }
    if (from.has_devicel3_type()) {
      set_devicel3_type(from.devicel3_type());
    }
    if (from.has_devicel3_name()) {
      set_devicel3_name(from.devicel3_name());
    }
    if (from.has_in_out()) {
      set_in_out(from.in_out());
    }
    if (from.has_ext_txt()) {
      set_ext_txt(from.ext_txt());
    }
    if (from.has_door_id()) {
      set_door_id(from.door_id());
    }
    if (from.has_card_status()) {
      set_card_status(from.card_status());
    }
    if (from.has_pic_url()) {
      set_pic_url(from.pic_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccessEventLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessEventLog::CopyFrom(const AccessEventLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessEventLog::IsInitialized() const {
  
  return true;
}

void AccessEventLog::Swap(AccessEventLog* other) {
  if (other != this) {
    std::swap(event_code_, other->event_code_);
    std::swap(device_id_, other->device_id_);
    std::swap(device_type_, other->device_type_);
    std::swap(device_name_, other->device_name_);
    std::swap(event_card_, other->event_card_);
    std::swap(person_id_, other->person_id_);
    std::swap(person_name_, other->person_name_);
    std::swap(dept_id_, other->dept_id_);
    std::swap(dept_name_, other->dept_name_);
    std::swap(dept_code_, other->dept_code_);
    std::swap(devicel1_id_, other->devicel1_id_);
    std::swap(devicel1_type_, other->devicel1_type_);
    std::swap(devicel1_name_, other->devicel1_name_);
    std::swap(devicel2_id_, other->devicel2_id_);
    std::swap(devicel2_type_, other->devicel2_type_);
    std::swap(devicel2_name_, other->devicel2_name_);
    std::swap(devicel3_id_, other->devicel3_id_);
    std::swap(devicel3_type_, other->devicel3_type_);
    std::swap(devicel3_name_, other->devicel3_name_);
    std::swap(in_out_, other->in_out_);
    std::swap(ext_txt_, other->ext_txt_);
    std::swap(door_id_, other->door_id_);
    std::swap(card_status_, other->card_status_);
    std::swap(pic_url_, other->pic_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccessEventLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccessEventLog_descriptor_;
  metadata.reflection = AccessEventLog_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace beds
}  // namespace eps
}  // namespace api
}  // namespace cms
}  // namespace hikvision
}  // namespace com

// @@protoc_insertion_point(global_scope)
