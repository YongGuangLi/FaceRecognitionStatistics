// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comm.proto

#ifndef PROTOBUF_comm_2eproto__INCLUDED
#define PROTOBUF_comm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace hikvision {
namespace cms {
namespace api {
namespace eps {
namespace beds {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_comm_2eproto();
void protobuf_AssignDesc_comm_2eproto();
void protobuf_ShutdownFile_comm_2eproto();

class TriggerResult;
class CommEventTrig;

enum EventState {
  EVENT_STATE_INSTANT = 0,
  EVENT_STATE_START = 1,
  EVENT_STATE_STOP = 2,
  EVENT_STATE_PULSE = 3,
  EVENT_STATE_UPDATE = 4
};
bool EventState_IsValid(int value);
const EventState EventState_MIN = EVENT_STATE_INSTANT;
const EventState EventState_MAX = EVENT_STATE_UPDATE;
const int EventState_ARRAYSIZE = EventState_MAX + 1;

const ::google::protobuf::EnumDescriptor* EventState_descriptor();
inline const ::std::string& EventState_Name(EventState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EventState_descriptor(), value);
}
inline bool EventState_Parse(
    const ::std::string& name, EventState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EventState>(
    EventState_descriptor(), name, value);
}
enum MsgCmdType {
  MSG_CMD_TYPE_MASK = 65280,
  MSG_CMD_MANUAL_EVENT = 257,
  MSG_CMD_CONFIRM_EVENT = 258,
  MSG_CMD_REPORT_EVENT = 513,
  MSG_CMD_SUBRECV_EVENT = 514,
  MSG_CMD_EVENT_NOTIFY_REQ = 769,
  MSG_CMD_EVENT_NOTIFY_RSP = 770
};
bool MsgCmdType_IsValid(int value);
const MsgCmdType MsgCmdType_MIN = MSG_CMD_MANUAL_EVENT;
const MsgCmdType MsgCmdType_MAX = MSG_CMD_TYPE_MASK;
const int MsgCmdType_ARRAYSIZE = MsgCmdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgCmdType_descriptor();
inline const ::std::string& MsgCmdType_Name(MsgCmdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgCmdType_descriptor(), value);
}
inline bool MsgCmdType_Parse(
    const ::std::string& name, MsgCmdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgCmdType>(
    MsgCmdType_descriptor(), name, value);
}
// ===================================================================

class TriggerResult : public ::google::protobuf::Message {
 public:
  TriggerResult();
  virtual ~TriggerResult();
  
  TriggerResult(const TriggerResult& from);
  
  inline TriggerResult& operator=(const TriggerResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TriggerResult& default_instance();
  
  void Swap(TriggerResult* other);
  
  // implements Message ----------------------------------------------
  
  TriggerResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TriggerResult& from);
  void MergeFrom(const TriggerResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 trigger_type = 1;
  inline bool has_trigger_type() const;
  inline void clear_trigger_type();
  static const int kTriggerTypeFieldNumber = 1;
  inline ::google::protobuf::int32 trigger_type() const;
  inline void set_trigger_type(::google::protobuf::int32 value);
  
  // repeated int32 trigger_ret = 2;
  inline int trigger_ret_size() const;
  inline void clear_trigger_ret();
  static const int kTriggerRetFieldNumber = 2;
  inline ::google::protobuf::int32 trigger_ret(int index) const;
  inline void set_trigger_ret(int index, ::google::protobuf::int32 value);
  inline void add_trigger_ret(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      trigger_ret() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_trigger_ret();
  
  // required string trigger_time = 3;
  inline bool has_trigger_time() const;
  inline void clear_trigger_time();
  static const int kTriggerTimeFieldNumber = 3;
  inline const ::std::string& trigger_time() const;
  inline void set_trigger_time(const ::std::string& value);
  inline void set_trigger_time(const char* value);
  inline void set_trigger_time(const char* value, size_t size);
  inline ::std::string* mutable_trigger_time();
  inline ::std::string* release_trigger_time();
  
  // optional string trigger_info = 33;
  inline bool has_trigger_info() const;
  inline void clear_trigger_info();
  static const int kTriggerInfoFieldNumber = 33;
  inline const ::std::string& trigger_info() const;
  inline void set_trigger_info(const ::std::string& value);
  inline void set_trigger_info(const char* value);
  inline void set_trigger_info(const char* value, size_t size);
  inline ::std::string* mutable_trigger_info();
  inline ::std::string* release_trigger_info();
  
  // optional string err_msg = 34;
  inline bool has_err_msg() const;
  inline void clear_err_msg();
  static const int kErrMsgFieldNumber = 34;
  inline const ::std::string& err_msg() const;
  inline void set_err_msg(const ::std::string& value);
  inline void set_err_msg(const char* value);
  inline void set_err_msg(const char* value, size_t size);
  inline ::std::string* mutable_err_msg();
  inline ::std::string* release_err_msg();
  
  // @@protoc_insertion_point(class_scope:com.hikvision.cms.api.eps.beds.TriggerResult)
 private:
  inline void set_has_trigger_type();
  inline void clear_has_trigger_type();
  inline void set_has_trigger_time();
  inline void clear_has_trigger_time();
  inline void set_has_trigger_info();
  inline void clear_has_trigger_info();
  inline void set_has_err_msg();
  inline void clear_has_err_msg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > trigger_ret_;
  ::std::string* trigger_time_;
  ::std::string* trigger_info_;
  ::std::string* err_msg_;
  ::google::protobuf::int32 trigger_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_comm_2eproto();
  friend void protobuf_AssignDesc_comm_2eproto();
  friend void protobuf_ShutdownFile_comm_2eproto();
  
  void InitAsDefaultInstance();
  static TriggerResult* default_instance_;
};
// -------------------------------------------------------------------

class CommEventTrig : public ::google::protobuf::Message {
 public:
  CommEventTrig();
  virtual ~CommEventTrig();
  
  CommEventTrig(const CommEventTrig& from);
  
  inline CommEventTrig& operator=(const CommEventTrig& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommEventTrig& default_instance();
  
  void Swap(CommEventTrig* other);
  
  // implements Message ----------------------------------------------
  
  CommEventTrig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommEventTrig& from);
  void MergeFrom(const CommEventTrig& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 trigger_type = 1;
  inline bool has_trigger_type() const;
  inline void clear_trigger_type();
  static const int kTriggerTypeFieldNumber = 1;
  inline ::google::protobuf::int32 trigger_type() const;
  inline void set_trigger_type(::google::protobuf::int32 value);
  
  // required bytes trigger_info = 2;
  inline bool has_trigger_info() const;
  inline void clear_trigger_info();
  static const int kTriggerInfoFieldNumber = 2;
  inline const ::std::string& trigger_info() const;
  inline void set_trigger_info(const ::std::string& value);
  inline void set_trigger_info(const char* value);
  inline void set_trigger_info(const void* value, size_t size);
  inline ::std::string* mutable_trigger_info();
  inline ::std::string* release_trigger_info();
  
  // @@protoc_insertion_point(class_scope:com.hikvision.cms.api.eps.beds.CommEventTrig)
 private:
  inline void set_has_trigger_type();
  inline void clear_has_trigger_type();
  inline void set_has_trigger_info();
  inline void clear_has_trigger_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* trigger_info_;
  ::google::protobuf::int32 trigger_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_comm_2eproto();
  friend void protobuf_AssignDesc_comm_2eproto();
  friend void protobuf_ShutdownFile_comm_2eproto();
  
  void InitAsDefaultInstance();
  static CommEventTrig* default_instance_;
};
// ===================================================================


// ===================================================================

// TriggerResult

// required int32 trigger_type = 1;
inline bool TriggerResult::has_trigger_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TriggerResult::set_has_trigger_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TriggerResult::clear_has_trigger_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TriggerResult::clear_trigger_type() {
  trigger_type_ = 0;
  clear_has_trigger_type();
}
inline ::google::protobuf::int32 TriggerResult::trigger_type() const {
  return trigger_type_;
}
inline void TriggerResult::set_trigger_type(::google::protobuf::int32 value) {
  set_has_trigger_type();
  trigger_type_ = value;
}

// repeated int32 trigger_ret = 2;
inline int TriggerResult::trigger_ret_size() const {
  return trigger_ret_.size();
}
inline void TriggerResult::clear_trigger_ret() {
  trigger_ret_.Clear();
}
inline ::google::protobuf::int32 TriggerResult::trigger_ret(int index) const {
  return trigger_ret_.Get(index);
}
inline void TriggerResult::set_trigger_ret(int index, ::google::protobuf::int32 value) {
  trigger_ret_.Set(index, value);
}
inline void TriggerResult::add_trigger_ret(::google::protobuf::int32 value) {
  trigger_ret_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TriggerResult::trigger_ret() const {
  return trigger_ret_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TriggerResult::mutable_trigger_ret() {
  return &trigger_ret_;
}

// required string trigger_time = 3;
inline bool TriggerResult::has_trigger_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TriggerResult::set_has_trigger_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TriggerResult::clear_has_trigger_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TriggerResult::clear_trigger_time() {
  if (trigger_time_ != &::google::protobuf::internal::kEmptyString) {
    trigger_time_->clear();
  }
  clear_has_trigger_time();
}
inline const ::std::string& TriggerResult::trigger_time() const {
  return *trigger_time_;
}
inline void TriggerResult::set_trigger_time(const ::std::string& value) {
  set_has_trigger_time();
  if (trigger_time_ == &::google::protobuf::internal::kEmptyString) {
    trigger_time_ = new ::std::string;
  }
  trigger_time_->assign(value);
}
inline void TriggerResult::set_trigger_time(const char* value) {
  set_has_trigger_time();
  if (trigger_time_ == &::google::protobuf::internal::kEmptyString) {
    trigger_time_ = new ::std::string;
  }
  trigger_time_->assign(value);
}
inline void TriggerResult::set_trigger_time(const char* value, size_t size) {
  set_has_trigger_time();
  if (trigger_time_ == &::google::protobuf::internal::kEmptyString) {
    trigger_time_ = new ::std::string;
  }
  trigger_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TriggerResult::mutable_trigger_time() {
  set_has_trigger_time();
  if (trigger_time_ == &::google::protobuf::internal::kEmptyString) {
    trigger_time_ = new ::std::string;
  }
  return trigger_time_;
}
inline ::std::string* TriggerResult::release_trigger_time() {
  clear_has_trigger_time();
  if (trigger_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = trigger_time_;
    trigger_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string trigger_info = 33;
inline bool TriggerResult::has_trigger_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TriggerResult::set_has_trigger_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TriggerResult::clear_has_trigger_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TriggerResult::clear_trigger_info() {
  if (trigger_info_ != &::google::protobuf::internal::kEmptyString) {
    trigger_info_->clear();
  }
  clear_has_trigger_info();
}
inline const ::std::string& TriggerResult::trigger_info() const {
  return *trigger_info_;
}
inline void TriggerResult::set_trigger_info(const ::std::string& value) {
  set_has_trigger_info();
  if (trigger_info_ == &::google::protobuf::internal::kEmptyString) {
    trigger_info_ = new ::std::string;
  }
  trigger_info_->assign(value);
}
inline void TriggerResult::set_trigger_info(const char* value) {
  set_has_trigger_info();
  if (trigger_info_ == &::google::protobuf::internal::kEmptyString) {
    trigger_info_ = new ::std::string;
  }
  trigger_info_->assign(value);
}
inline void TriggerResult::set_trigger_info(const char* value, size_t size) {
  set_has_trigger_info();
  if (trigger_info_ == &::google::protobuf::internal::kEmptyString) {
    trigger_info_ = new ::std::string;
  }
  trigger_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TriggerResult::mutable_trigger_info() {
  set_has_trigger_info();
  if (trigger_info_ == &::google::protobuf::internal::kEmptyString) {
    trigger_info_ = new ::std::string;
  }
  return trigger_info_;
}
inline ::std::string* TriggerResult::release_trigger_info() {
  clear_has_trigger_info();
  if (trigger_info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = trigger_info_;
    trigger_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string err_msg = 34;
inline bool TriggerResult::has_err_msg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TriggerResult::set_has_err_msg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TriggerResult::clear_has_err_msg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TriggerResult::clear_err_msg() {
  if (err_msg_ != &::google::protobuf::internal::kEmptyString) {
    err_msg_->clear();
  }
  clear_has_err_msg();
}
inline const ::std::string& TriggerResult::err_msg() const {
  return *err_msg_;
}
inline void TriggerResult::set_err_msg(const ::std::string& value) {
  set_has_err_msg();
  if (err_msg_ == &::google::protobuf::internal::kEmptyString) {
    err_msg_ = new ::std::string;
  }
  err_msg_->assign(value);
}
inline void TriggerResult::set_err_msg(const char* value) {
  set_has_err_msg();
  if (err_msg_ == &::google::protobuf::internal::kEmptyString) {
    err_msg_ = new ::std::string;
  }
  err_msg_->assign(value);
}
inline void TriggerResult::set_err_msg(const char* value, size_t size) {
  set_has_err_msg();
  if (err_msg_ == &::google::protobuf::internal::kEmptyString) {
    err_msg_ = new ::std::string;
  }
  err_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TriggerResult::mutable_err_msg() {
  set_has_err_msg();
  if (err_msg_ == &::google::protobuf::internal::kEmptyString) {
    err_msg_ = new ::std::string;
  }
  return err_msg_;
}
inline ::std::string* TriggerResult::release_err_msg() {
  clear_has_err_msg();
  if (err_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = err_msg_;
    err_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CommEventTrig

// required int32 trigger_type = 1;
inline bool CommEventTrig::has_trigger_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommEventTrig::set_has_trigger_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommEventTrig::clear_has_trigger_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommEventTrig::clear_trigger_type() {
  trigger_type_ = 0;
  clear_has_trigger_type();
}
inline ::google::protobuf::int32 CommEventTrig::trigger_type() const {
  return trigger_type_;
}
inline void CommEventTrig::set_trigger_type(::google::protobuf::int32 value) {
  set_has_trigger_type();
  trigger_type_ = value;
}

// required bytes trigger_info = 2;
inline bool CommEventTrig::has_trigger_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommEventTrig::set_has_trigger_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommEventTrig::clear_has_trigger_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommEventTrig::clear_trigger_info() {
  if (trigger_info_ != &::google::protobuf::internal::kEmptyString) {
    trigger_info_->clear();
  }
  clear_has_trigger_info();
}
inline const ::std::string& CommEventTrig::trigger_info() const {
  return *trigger_info_;
}
inline void CommEventTrig::set_trigger_info(const ::std::string& value) {
  set_has_trigger_info();
  if (trigger_info_ == &::google::protobuf::internal::kEmptyString) {
    trigger_info_ = new ::std::string;
  }
  trigger_info_->assign(value);
}
inline void CommEventTrig::set_trigger_info(const char* value) {
  set_has_trigger_info();
  if (trigger_info_ == &::google::protobuf::internal::kEmptyString) {
    trigger_info_ = new ::std::string;
  }
  trigger_info_->assign(value);
}
inline void CommEventTrig::set_trigger_info(const void* value, size_t size) {
  set_has_trigger_info();
  if (trigger_info_ == &::google::protobuf::internal::kEmptyString) {
    trigger_info_ = new ::std::string;
  }
  trigger_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommEventTrig::mutable_trigger_info() {
  set_has_trigger_info();
  if (trigger_info_ == &::google::protobuf::internal::kEmptyString) {
    trigger_info_ = new ::std::string;
  }
  return trigger_info_;
}
inline ::std::string* CommEventTrig::release_trigger_info() {
  clear_has_trigger_info();
  if (trigger_info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = trigger_info_;
    trigger_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace beds
}  // namespace eps
}  // namespace api
}  // namespace cms
}  // namespace hikvision
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< com::hikvision::cms::api::eps::beds::EventState>() {
  return com::hikvision::cms::api::eps::beds::EventState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< com::hikvision::cms::api::eps::beds::MsgCmdType>() {
  return com::hikvision::cms::api::eps::beds::MsgCmdType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_comm_2eproto__INCLUDED
